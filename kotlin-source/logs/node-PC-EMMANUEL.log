[INFO ] 2019-04-17T03:30:28,874Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-e8286525-1617-4bee-ae24-3d7886416523.jar {}
[INFO ] 2019-04-17T03:30:29,220Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-9f7835a7-396b-4157-a319-ce76190b0326.jar {}
[INFO ] 2019-04-17T03:30:29,385Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e8286525-1617-4bee-ae24-3d7886416523.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9f7835a7-396b-4157-a319-ce76190b0326.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T03:30:29,433Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e8286525-1617-4bee-ae24-3d7886416523.jar {}
[INFO ] 2019-04-17T03:30:29,544Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-9f7835a7-396b-4157-a319-ce76190b0326.jar {}
[WARN ] 2019-04-17T03:30:29,891Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:44,433Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:44,626Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:44,948Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,091Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,266Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,404Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,537Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,676Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:45,872Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:46,015Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:46,199Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:30:46,459Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T03:35:22,669Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-3f05899d-97e9-48e5-9c44-e9b1f53c6650.jar {}
[INFO ] 2019-04-17T03:35:23,112Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-fdf72042-4265-424f-98f1-ddd98acf139a.jar {}
[INFO ] 2019-04-17T03:35:23,270Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3f05899d-97e9-48e5-9c44-e9b1f53c6650.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fdf72042-4265-424f-98f1-ddd98acf139a.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T03:35:23,334Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3f05899d-97e9-48e5-9c44-e9b1f53c6650.jar {}
[INFO ] 2019-04-17T03:35:23,415Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fdf72042-4265-424f-98f1-ddd98acf139a.jar {}
[WARN ] 2019-04-17T03:35:23,896Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:34,660Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:35,344Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:35,660Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:35,811Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:35,996Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,154Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,322Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,478Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,651Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,816Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:36,984Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T03:35:37,201Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:09:01,411Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-67187fee-4ae4-43f0-90d6-0107365907fb.jar {}
[INFO ] 2019-04-17T04:09:01,807Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-256c2e11-0d6f-413c-9ede-937ca8cd4e6a.jar {}
[INFO ] 2019-04-17T04:09:02,043Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-67187fee-4ae4-43f0-90d6-0107365907fb.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-256c2e11-0d6f-413c-9ede-937ca8cd4e6a.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T04:09:02,143Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-67187fee-4ae4-43f0-90d6-0107365907fb.jar {}
[INFO ] 2019-04-17T04:09:02,232Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-256c2e11-0d6f-413c-9ede-937ca8cd4e6a.jar {}
[WARN ] 2019-04-17T04:09:02,539Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:11,572Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:12,301Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:12,688Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:12,859Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,052Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,260Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,452Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,588Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,725Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:13,869Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:14,059Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:09:14,331Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:12:08,674Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-c0b909aa-e051-49c8-abd2-937124ead92d.jar {}
[INFO ] 2019-04-17T04:12:08,927Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-77fedb71-ab5b-4daa-9040-6a7f25db5211.jar {}
[INFO ] 2019-04-17T04:12:09,088Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c0b909aa-e051-49c8-abd2-937124ead92d.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-77fedb71-ab5b-4daa-9040-6a7f25db5211.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T04:12:09,141Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c0b909aa-e051-49c8-abd2-937124ead92d.jar {}
[INFO ] 2019-04-17T04:12:09,257Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-77fedb71-ab5b-4daa-9040-6a7f25db5211.jar {}
[WARN ] 2019-04-17T04:12:09,574Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:12:18,383Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:14:59,349Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:06,642Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:06,784Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:06,946Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:07,095Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:08,478Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:08,706Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:08,890Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:09,100Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:09,648Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:15:09,850Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:39:50,654Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-3db9f892-60d9-4661-ae7b-d4bbbbeb5283.jar {}
[INFO ] 2019-04-17T04:39:51,218Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-6c54ea70-ea31-46a5-b455-692e90a6959e.jar {}
[INFO ] 2019-04-17T04:39:51,665Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3db9f892-60d9-4661-ae7b-d4bbbbeb5283.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6c54ea70-ea31-46a5-b455-692e90a6959e.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T04:39:51,721Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-3db9f892-60d9-4661-ae7b-d4bbbbeb5283.jar {}
[INFO ] 2019-04-17T04:39:51,889Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6c54ea70-ea31-46a5-b455-692e90a6959e.jar {}
[WARN ] 2019-04-17T04:39:52,326Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:03,548Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:03,826Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,121Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,263Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,405Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,591Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,741Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:04,868Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:05,037Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:05,262Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:05,391Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:40:05,550Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:41:35,195Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-c24ed581-dd49-4f58-b764-be18825cf461.jar {}
[INFO ] 2019-04-17T04:41:35,460Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-8afcda29-35af-4221-8e25-193454b833cc.jar {}
[INFO ] 2019-04-17T04:41:35,606Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c24ed581-dd49-4f58-b764-be18825cf461.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8afcda29-35af-4221-8e25-193454b833cc.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T04:41:35,672Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-c24ed581-dd49-4f58-b764-be18825cf461.jar {}
[INFO ] 2019-04-17T04:41:35,758Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-8afcda29-35af-4221-8e25-193454b833cc.jar {}
[WARN ] 2019-04-17T04:41:36,183Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:46,192Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:46,437Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:46,671Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:46,800Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:46,932Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,067Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,230Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,357Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,494Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,629Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,761Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:41:47,916Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:10,915Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-e66389fa-29b3-4183-8f0b-b48a00146ddd.jar {}
[INFO ] 2019-04-17T04:48:10,983Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-4eb26dcd-ad5a-424a-b3a4-0963d451e848.jar {}
[INFO ] 2019-04-17T04:48:11,104Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-774b49ca-d987-495f-9a21-a32ef610769d.jar {}
[INFO ] 2019-04-17T04:48:11,149Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e66389fa-29b3-4183-8f0b-b48a00146ddd.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-4eb26dcd-ad5a-424a-b3a4-0963d451e848.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-774b49ca-d987-495f-9a21-a32ef610769d.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T04:48:11,199Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:11,203Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:11,221Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e66389fa-29b3-4183-8f0b-b48a00146ddd.jar {}
[INFO ] 2019-04-17T04:48:11,254Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-4eb26dcd-ad5a-424a-b3a4-0963d451e848.jar {}
[INFO ] 2019-04-17T04:48:11,280Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-774b49ca-d987-495f-9a21-a32ef610769d.jar {}
[INFO ] 2019-04-17T04:48:11,423Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@761ea1f5 {}
[INFO ] 2019-04-17T04:48:12,578Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:12,644Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:12,651Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:15,675Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:16,508Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:16,513Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:16,533Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:16,694Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:16,697Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:16,988Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:17,009Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:17,233Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:17,573Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DB69C613BFCEDC68CB09D01C6E314B3E5C96B2719D9904E30E273DC523DFF077, not inserting the second time {}
[INFO ] 2019-04-17T04:48:17,682Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:17,713Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:17,718Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:17,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:17,728Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:17,731Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:17,743Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:17,748Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:17,893Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:17,931Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4e6b3894 {}
[INFO ] 2019-04-17T04:48:17,962Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:17,964Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:17,966Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:18,236Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:18,268Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:18,277Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,293Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:18,332Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,334Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,487Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:18,500Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:18,549Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5958562F93635F9A62F3D8CB2AFABF08A198784EC618FFFB61FF4AC524A4914D, not inserting the second time {}
[INFO ] 2019-04-17T04:48:18,577Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:18,585Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:18,620Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:18,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,630Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:18,666Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,670Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,681Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:18,687Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,695Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:18,699Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:18,707Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:18,714Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:18,769Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:18,799Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@390d47db {}
[INFO ] 2019-04-17T04:48:18,828Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:18,834Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:18,838Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:19,084Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:19,097Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:19,101Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,107Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:19,115Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,118Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,239Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:19,256Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:19,284Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F24D642EFC00C3C91ED6FAC88D0594FBEC85EF08862D9810B86B496456C0CBF9, not inserting the second time {}
[INFO ] 2019-04-17T04:48:19,297Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:19,303Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:19,325Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476496512) {}
[INFO ] 2019-04-17T04:48:19,330Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,335Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:19,363Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,377Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:19,385Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:19,410Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476498277) {}
[INFO ] 2019-04-17T04:48:19,412Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,416Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:19,427Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,429Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,434Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:19,435Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,436Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,441Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:19,442Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476499101) {}
[INFO ] 2019-04-17T04:48:19,469Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:19,472Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:20,482Z [Mock network] flow.[6c315c3e-e546-4edc-adc7-93c318b72a03].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4987808048826930578). {}
[INFO ] 2019-04-17T04:48:20,767Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4987808048826930578). {invocation_id=e276badd-25d6-4fd4-acad-a61bb5199c31, invocation_timestamp=2019-04-17T04:48:20.753Z, session_id=e276badd-25d6-4fd4-acad-a61bb5199c31, session_timestamp=2019-04-17T04:48:20.753Z}
[INFO ] 2019-04-17T04:48:21,335Z [Mock network] flow.[6c315c3e-e546-4edc-adc7-93c318b72a03].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=836002278867650820). {}
[INFO ] 2019-04-17T04:48:21,417Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=836002278867650820). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=a0d0d240-0fa3-4d7f-b017-e3b8f6dc759c, invocation_timestamp=2019-04-17T04:48:21.415Z, session_id=a0d0d240-0fa3-4d7f-b017-e3b8f6dc759c, session_timestamp=2019-04-17T04:48:21.415Z}
[INFO ] 2019-04-17T04:48:21,751Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:21,755Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:21,763Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2483eb07 {}
[INFO ] 2019-04-17T04:48:21,793Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:21,797Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:21,801Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,045Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,057Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:22,060Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,065Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:22,087Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,089Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,202Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:22,204Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:22,214Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:22,229Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0407880F860AF049960B860CB7F16285E2B28E6637AEF572A01F1E7A0E25B6EB, not inserting the second time {}
[INFO ] 2019-04-17T04:48:22,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,257Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:22,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,260Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,261Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:22,263Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,269Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:22,279Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:22,307Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:22,328Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48f359e4 {}
[INFO ] 2019-04-17T04:48:22,354Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:22,357Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,359Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,509Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,521Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:22,523Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,527Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:22,531Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,533Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,626Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:22,628Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:22,644Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D9C697AEE47C3DEFE4C772A545A96B369889E82F33CEF4F8A6ED48C52A4B4391, not inserting the second time {}
[INFO ] 2019-04-17T04:48:22,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:22,673Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:22,675Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,678Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:22,704Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,709Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,715Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:22,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,718Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,720Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:22,722Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:22,733Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:22,737Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:22,767Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:22,793Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2174acc0 {}
[INFO ] 2019-04-17T04:48:22,806Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:22,809Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,810Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,925Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:22,960Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:22,961Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:22,967Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:22,973Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:22,974Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,093Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:23,095Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:23,111Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1760F39806182DD4D2BC7CD58F34690AFA5A78C6DC95CFFD7177936F0D67C58E, not inserting the second time {}
[INFO ] 2019-04-17T04:48:23,117Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:23,120Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:23,138Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476502060) {}
[INFO ] 2019-04-17T04:48:23,140Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,143Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:23,153Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,156Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:23,159Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:23,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476502523) {}
[INFO ] 2019-04-17T04:48:23,172Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,174Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:23,189Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,191Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,197Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:23,199Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,200Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,201Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:23,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476502961) {}
[INFO ] 2019-04-17T04:48:23,209Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:23,210Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T04:48:23,333Z [Mock network] flow.[c2004557-d5ab-4953-87cf-ab7605b496b8].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: CAE35AF1F3844176C4AE4E5BDB45B7E91EF8EFAEA8ED14A0F469B8DAFDB1BEE5
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T04:48:23,443Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:23,444Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:23,449Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f39afe {}
[INFO ] 2019-04-17T04:48:23,461Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:23,462Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:23,463Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:23,585Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:23,593Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:23,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,598Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:23,614Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,615Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,718Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:23,721Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:23,726Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:23,738Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8D11FE5D350442AE2DC4A9AA3DDAD18871E439344609F2EFCD674CAABBE6106E, not inserting the second time {}
[INFO ] 2019-04-17T04:48:23,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,754Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:23,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,779Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:23,783Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:23,791Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:23,794Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:23,814Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:23,823Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@47f4d61 {}
[INFO ] 2019-04-17T04:48:23,833Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:23,834Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:23,835Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:24,000Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:24,019Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:24,021Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,028Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,034Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,035Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,144Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:24,146Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:24,169Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9819E3175D8F07F4E499AABC755388AD15E0C4CC653ADBFAAE492643B2553890, not inserting the second time {}
[INFO ] 2019-04-17T04:48:24,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:24,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,212Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:24,215Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,224Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,235Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,236Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,241Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:24,242Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,243Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,250Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:24,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,262Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:24,263Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:24,364Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:24,474Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@10bcceb5 {}
[INFO ] 2019-04-17T04:48:24,508Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:24,509Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:24,511Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:24,643Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:24,661Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:24,670Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,674Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,678Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,679Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,779Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:24,781Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:24,796Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 89BD3FE995D00B8D53D92A5F680E32D4F800C13F9624092C662AE584849D1FC2, not inserting the second time {}
[INFO ] 2019-04-17T04:48:24,802Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:24,804Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,812Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476503594) {}
[INFO ] 2019-04-17T04:48:24,813Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,814Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,822Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,823Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,826Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,834Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476504021) {}
[INFO ] 2019-04-17T04:48:24,836Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,839Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:24,853Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,860Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:24,861Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,862Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,863Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:24,864Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476504670) {}
[INFO ] 2019-04-17T04:48:24,865Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:24,865Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:24,966Z [Mock network] flow.[0126dd98-df93-4b43-a669-59fd056d8298].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1286900733007804834). {}
[INFO ] 2019-04-17T04:48:25,039Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1286900733007804834). {invocation_id=f4e4d290-991d-42c9-8bcb-e1f22d15357b, invocation_timestamp=2019-04-17T04:48:25.037Z, session_id=f4e4d290-991d-42c9-8bcb-e1f22d15357b, session_timestamp=2019-04-17T04:48:25.037Z}
[INFO ] 2019-04-17T04:48:25,361Z [Mock network] flow.[0126dd98-df93-4b43-a669-59fd056d8298].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2832575608602601590). {}
[INFO ] 2019-04-17T04:48:25,388Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2832575608602601590). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=ecefe22a-181a-4f6a-9098-58eb22dd4b08, invocation_timestamp=2019-04-17T04:48:25.385Z, session_id=ecefe22a-181a-4f6a-9098-58eb22dd4b08, session_timestamp=2019-04-17T04:48:25.385Z}
[INFO ] 2019-04-17T04:48:25,516Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:25,517Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:25,524Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@b6352a5 {}
[INFO ] 2019-04-17T04:48:25,540Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:25,541Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,542Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,660Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,667Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:25,668Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,673Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:25,684Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,685Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,784Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:25,785Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:25,791Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:25,800Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8D974FFF00B102469267D9B5141536A49D3A07E4270885F44D3AF4876777A071, not inserting the second time {}
[INFO ] 2019-04-17T04:48:25,806Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,810Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:25,812Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,812Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,813Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:25,815Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:25,818Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:25,819Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:25,832Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:25,839Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@26d78474 {}
[INFO ] 2019-04-17T04:48:25,847Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:25,849Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,850Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,959Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:25,976Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:25,980Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:25,985Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:25,992Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:25,994Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,089Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:26,091Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:26,104Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FE13B79BD11209A97D7A2D55281B3A3F896412C233F87295643AD2AEFC0D8916, not inserting the second time {}
[INFO ] 2019-04-17T04:48:26,109Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:26,111Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,117Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:26,121Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,124Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,135Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,139Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,145Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:26,146Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,147Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,147Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:26,148Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,151Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:26,152Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:26,164Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:26,172Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@627e21c9 {}
[INFO ] 2019-04-17T04:48:26,179Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:26,181Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:26,182Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:26,328Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:26,339Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:26,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,349Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,442Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:26,445Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:26,461Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6178A0544CAEDE041E9BA00E0E38F785E197A83FE4C2DB3F7902744DACBBCB40, not inserting the second time {}
[INFO ] 2019-04-17T04:48:26,467Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:26,469Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,476Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476505668) {}
[INFO ] 2019-04-17T04:48:26,477Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,481Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,490Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,493Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476505980) {}
[INFO ] 2019-04-17T04:48:26,501Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,502Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:26,509Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,510Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,515Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:26,516Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,517Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,518Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:26,519Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476506340) {}
[INFO ] 2019-04-17T04:48:26,522Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:26,523Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:26,584Z [Mock network] flow.[01ea0c43-6795-454c-85f0-91c4b88091f6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3951916294676244117). {}
[INFO ] 2019-04-17T04:48:26,632Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3951916294676244117). {invocation_id=1f871e17-c1b7-4fcf-82fb-e86898628979, invocation_timestamp=2019-04-17T04:48:26.631Z, session_id=1f871e17-c1b7-4fcf-82fb-e86898628979, session_timestamp=2019-04-17T04:48:26.631Z}
[INFO ] 2019-04-17T04:48:26,793Z [Mock network] flow.[01ea0c43-6795-454c-85f0-91c4b88091f6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=820091853529668905). {}
[INFO ] 2019-04-17T04:48:26,808Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=820091853529668905). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=29363a74-6f13-433f-b95b-cce324d133a1, invocation_timestamp=2019-04-17T04:48:26.808Z, session_id=29363a74-6f13-433f-b95b-cce324d133a1, session_timestamp=2019-04-17T04:48:26.808Z}
[INFO ] 2019-04-17T04:48:26,930Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:26,931Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:26,937Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2291c14a {}
[INFO ] 2019-04-17T04:48:26,955Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:26,956Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:26,958Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,064Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,070Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:27,073Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,077Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,084Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,085Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,195Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:27,197Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:27,202Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:27,212Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 20FE63955068FF162A4F48E4B52F5B0BD70CAD81A8C6DB83F06BFCF463496ABB, not inserting the second time {}
[INFO ] 2019-04-17T04:48:27,218Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,224Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,226Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,227Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,230Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,233Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,246Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:27,248Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:27,262Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:27,270Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@53e6f464 {}
[INFO ] 2019-04-17T04:48:27,278Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:27,279Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,280Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,407Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,417Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:27,418Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,422Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,425Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,426Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,527Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:27,531Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:27,545Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2729BECA623060E4A19F3D5C0B8EE36C4B4D4C28887D2805C547557E33E81F62, not inserting the second time {}
[INFO ] 2019-04-17T04:48:27,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,552Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,557Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,567Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,568Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,572Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,573Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,574Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,574Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,575Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,577Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:27,578Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:27,590Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:27,599Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@77b6f0f {}
[INFO ] 2019-04-17T04:48:27,606Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:27,608Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,609Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,732Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:27,741Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:27,742Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,746Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,749Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,749Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,842Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:27,848Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:27,903Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FCB8359D2EDC71BFCCE893A5E4381E711532668EABA22E950EA7ADB6746A2950, not inserting the second time {}
[INFO ] 2019-04-17T04:48:27,911Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,913Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,918Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476507073) {}
[INFO ] 2019-04-17T04:48:27,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,921Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,928Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,930Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,936Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476507418) {}
[INFO ] 2019-04-17T04:48:27,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,939Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:27,948Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,949Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,954Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,955Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,957Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,958Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:27,958Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476507742) {}
[INFO ] 2019-04-17T04:48:27,959Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:27,960Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:28,014Z [Mock network] flow.[27505244-f163-4b77-b4bb-e8e3b8a182c3].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2906638304217712237). {}
[INFO ] 2019-04-17T04:48:28,135Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2906638304217712237). {invocation_id=5e8b0cb5-eb19-442c-9703-b5e0806fa326, invocation_timestamp=2019-04-17T04:48:28.134Z, session_id=5e8b0cb5-eb19-442c-9703-b5e0806fa326, session_timestamp=2019-04-17T04:48:28.134Z}
[INFO ] 2019-04-17T04:48:28,300Z [Mock network] flow.[27505244-f163-4b77-b4bb-e8e3b8a182c3].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3656659013943385532). {}
[INFO ] 2019-04-17T04:48:28,321Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3656659013943385532). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=b4f64a9d-0680-4ffa-bf2b-868ed60aabd2, invocation_timestamp=2019-04-17T04:48:28.320Z, session_id=b4f64a9d-0680-4ffa-bf2b-868ed60aabd2, session_timestamp=2019-04-17T04:48:28.320Z}
[INFO ] 2019-04-17T04:48:28,471Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:28,473Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:28,484Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1e81ebc8 {}
[INFO ] 2019-04-17T04:48:28,498Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:28,500Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:28,501Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:28,664Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:28,689Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:28,692Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:28,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,718Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,827Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:28,829Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T04:48:28,833Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T04:48:28,845Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 88CFC0908F63F6458F2687CB19041CCFA0697F3D3DF9D6B8DD727A24E2F75646, not inserting the second time {}
[INFO ] 2019-04-17T04:48:28,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,875Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:28,877Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,878Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,879Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:28,880Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:28,884Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:28,885Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:28,912Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:28,936Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@36971bef {}
[INFO ] 2019-04-17T04:48:28,948Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:28,953Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:28,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:29,075Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:29,085Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:29,087Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,094Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,097Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,101Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,214Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:29,216Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:29,230Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E089634B4F406FDC4D3CA562A647B8733BB719D4A35F7D614B7B07F82394B571, not inserting the second time {}
[INFO ] 2019-04-17T04:48:29,235Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:29,239Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,245Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:29,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,250Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,260Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,261Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,264Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:29,264Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,265Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,265Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:29,266Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,269Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T04:48:29,270Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T04:48:29,283Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T04:48:29,291Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33a9e48f {}
[INFO ] 2019-04-17T04:48:29,298Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T04:48:29,299Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:29,300Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:29,399Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T04:48:29,416Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T04:48:29,417Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,425Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,428Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,429Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,526Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T04:48:29,528Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T04:48:29,539Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 11775FFFB246476F0FE4015288C953383F8DEF81D287EB6786EABE07766937AA, not inserting the second time {}
[INFO ] 2019-04-17T04:48:29,544Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:29,545Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,550Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555476508692) {}
[INFO ] 2019-04-17T04:48:29,551Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,552Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,558Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,565Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555476509087) {}
[INFO ] 2019-04-17T04:48:29,566Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,567Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T04:48:29,572Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,576Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:29,577Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,577Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,578Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T04:48:29,578Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555476509417) {}
[INFO ] 2019-04-17T04:48:29,579Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:29,580Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T04:48:29,652Z [Mock network] flow.[b67b8509-7dd7-4d04-a6c9-3ee2d1eef0f0].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1927439649704259076). {}
[INFO ] 2019-04-17T04:48:29,740Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1927439649704259076). {invocation_id=ae674dc0-81a8-463c-8c33-6784391e5b7c, invocation_timestamp=2019-04-17T04:48:29.737Z, session_id=ae674dc0-81a8-463c-8c33-6784391e5b7c, session_timestamp=2019-04-17T04:48:29.737Z}
[INFO ] 2019-04-17T04:48:29,833Z [Mock network] flow.[b67b8509-7dd7-4d04-a6c9-3ee2d1eef0f0].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-262480660789849291). {}
[INFO ] 2019-04-17T04:48:29,847Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-262480660789849291). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=63f6839b-520d-4a10-b4f1-e7ec623f5a6e, invocation_timestamp=2019-04-17T04:48:29.846Z, session_id=63f6839b-520d-4a10-b4f1-e7ec623f5a6e, session_timestamp=2019-04-17T04:48:29.846Z}
[INFO ] 2019-04-17T04:48:29,904Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T04:48:29,972Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:22:04,928Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-dd2ec046-8ce7-4d29-83a8-35db3fd921f7.jar {}
[INFO ] 2019-04-17T05:22:05,087Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-1137c000-78fa-4231-9610-bc2105c0e983.jar {}
[INFO ] 2019-04-17T05:22:05,138Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-65632f25-be68-4541-98f1-3531434e84a6.jar {}
[INFO ] 2019-04-17T05:22:05,199Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-dd2ec046-8ce7-4d29-83a8-35db3fd921f7.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1137c000-78fa-4231-9610-bc2105c0e983.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-65632f25-be68-4541-98f1-3531434e84a6.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:22:05,225Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:22:05,229Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:22:05,243Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-dd2ec046-8ce7-4d29-83a8-35db3fd921f7.jar {}
[INFO ] 2019-04-17T05:22:05,273Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-1137c000-78fa-4231-9610-bc2105c0e983.jar {}
[INFO ] 2019-04-17T05:22:05,298Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-65632f25-be68-4541-98f1-3531434e84a6.jar {}
[INFO ] 2019-04-17T05:22:05,384Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4f2d014a {}
[INFO ] 2019-04-17T05:22:05,869Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:22:05,904Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:22:05,911Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:22:07,496Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:22:07,873Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:22:07,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478527893) {}
[INFO ] 2019-04-17T05:22:07,930Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:22:08,169Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478527893) {}
[INFO ] 2019-04-17T05:22:08,173Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478527893) {}
[INFO ] 2019-04-17T05:22:08,424Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:22:08,431Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:22:08,501Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:22:08,613Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5E2051D79C796B2BF5A9A8DD988A3C4AC264B22A0F5B91CBD1F33CAAFC0784ED, not inserting the second time {}
[INFO ] 2019-04-17T05:24:24,427Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\NotaryService",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\NotaryService/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=Notary Service, L=Zurich, C=CH",
    # hardcoded value
    "notary" : {
        # hardcoded value
        "custom" : false,
        # hardcoded value
        "validating" : true
    },
    # hardcoded value
    "p2pAddress" : "localhost:10002",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10003",
        # hardcoded value
        "adminAddress" : "localhost:10004",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10005"
}
 {}
[INFO ] 2019-04-17T05:24:24,860Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052407.558\NotaryService {}
[INFO ] 2019-04-17T05:24:24,967Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\BankB",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\BankB/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=BankB, L=, C=US",
    # hardcoded value
    "p2pAddress" : "localhost:10001",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10006",
        # hardcoded value
        "adminAddress" : "localhost:10007",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10008"
}
 {}
[INFO ] 2019-04-17T05:24:24,871Z [driver-pool-thread-1] internal.DriverDSLImpl.invoke - Starting in-process Node Notary Service {}
[INFO ] 2019-04-17T05:24:25,299Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052407.558\BankB {}
[INFO ] 2019-04-17T05:24:25,446Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\BankA",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052407.558\\BankA/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=BankA, L=, C=GB",
    # hardcoded value
    "p2pAddress" : "localhost:10000",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10009",
        # hardcoded value
        "adminAddress" : "localhost:10010",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10011"
}
 {}
[INFO ] 2019-04-17T05:24:25,460Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052407.558\BankA {}
[INFO ] 2019-04-17T05:24:25,465Z [driver-pool-thread-0] internal.DriverDSLImpl.invoke - Starting in-process Node BankB {}
[INFO ] 2019-04-17T05:24:25,467Z [driver-pool-thread-1] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/integrationTest/com/example: build\tmp\generated-test-cordapps\com.example-3d89e9d5-40a7-4e11-ba25-35ab925949e6.jar {}
[INFO ] 2019-04-17T05:24:25,522Z [driver-pool-thread-1] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example: build\tmp\generated-test-cordapps\com.example-86448741-fbf8-45f7-8ffd-198c1b8b0e47.jar {}
[INFO ] 2019-04-17T05:24:25,668Z [driver-pool-thread-0] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example: build\tmp\generated-test-cordapps\com.example-e6e7258a-8b3e-452d-a819-e9fc14cbc4ef.jar {}
[INFO ] 2019-04-17T05:24:25,994Z [driver-pool-thread-0] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-3d89e9d5-40a7-4e11-ba25-35ab925949e6.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-86448741-fbf8-45f7-8ffd-198c1b8b0e47.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-e6e7258a-8b3e-452d-a819-e9fc14cbc4ef.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:24:26,040Z [driver-pool-thread-1] internal.Node.start - Node starting up ... {}
[INFO ] 2019-04-17T05:24:26,045Z [driver-pool-thread-0] internal.Node.start - Node starting up ... {}
[WARN ] 2019-04-17T05:24:26,054Z [driver-pool-thread-0] internal.Node.initCertificate - Corda node is running in dev mode. {}
[WARN ] 2019-04-17T05:24:26,053Z [driver-pool-thread-1] internal.Node.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:24:26,079Z [driver-pool-thread-1] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-3d89e9d5-40a7-4e11-ba25-35ab925949e6.jar {}
[INFO ] 2019-04-17T05:24:26,131Z [driver-pool-thread-1] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-86448741-fbf8-45f7-8ffd-198c1b8b0e47.jar {}
[INFO ] 2019-04-17T05:24:26,180Z [driver-pool-thread-1] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example-e6e7258a-8b3e-452d-a819-e9fc14cbc4ef.jar {}
[INFO ] 2019-04-17T05:24:26,226Z [driver-pool-thread-0] internal.Node.obtainIdentity - identity-private-key not found in key store F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052407.558\BankB\certificates\nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:24:26,342Z [driver-pool-thread-0] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@51dec08 {}
[INFO ] 2019-04-17T05:24:26,342Z [driver-pool-thread-1] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@75baf235 {}
[INFO ] 2019-04-17T05:24:27,154Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:64994/node {}
[INFO ] 2019-04-17T05:24:27,165Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:64995/node {}
[INFO ] 2019-04-17T05:24:27,791Z [driver-pool-thread-0] internal.Node.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:24:27,792Z [driver-pool-thread-1] internal.Node.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:24:27,847Z [driver-pool-thread-1] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:27,846Z [driver-pool-thread-0] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:27,852Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:27,855Z [driver-pool-thread-0] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:30,999Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:31,005Z [driver-pool-thread-0] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:31,805Z [driver-pool-thread-0] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:31,805Z [driver-pool-thread-1] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:31,864Z [driver-pool-thread-1] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:31,869Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:31,848Z [driver-pool-thread-0] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:31,874Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:31,887Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:31,887Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:32,036Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:32,036Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:32,041Z [driver-pool-thread-1] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:32,041Z [driver-pool-thread-0] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:32,449Z [driver-pool-thread-0] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:32,465Z [driver-pool-thread-0] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:32,470Z [driver-pool-thread-1] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:32,475Z [driver-pool-thread-1] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:32,534Z [driver-pool-thread-0] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:32,534Z [driver-pool-thread-1] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:32,948Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10001 {}
[INFO ] 2019-04-17T05:24:32,948Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10002 {}
[INFO ] 2019-04-17T05:24:32,956Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10003 {}
[INFO ] 2019-04-17T05:24:32,956Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10006 {}
[INFO ] 2019-04-17T05:24:32,956Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10004 {}
[INFO ] 2019-04-17T05:24:32,956Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10007 {}
[INFO ] 2019-04-17T05:24:33,051Z [driver-pool-thread-1] internal.Node.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-04-17T05:24:35,757Z [driver-pool-thread-0] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10001 {}
[INFO ] 2019-04-17T05:24:35,769Z [driver-pool-thread-1] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10002 {}
[INFO ] 2019-04-17T05:24:37,486Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:37,514Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:38,407Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:38,407Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:38,607Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10007 {}
[INFO ] 2019-04-17T05:24:38,615Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10004 {}
[INFO ] 2019-04-17T05:24:38,720Z [driver-pool-thread-1] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:38,720Z [driver-pool-thread-0] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:38,771Z [driver-pool-thread-0] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DL25SLM9KzZexTJi5UE9xqoaSyoWnJhfegvaFb7Wa7GQgv bound on same address {}
[INFO ] 2019-04-17T05:24:38,771Z [driver-pool-thread-1] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DLJ1Jx3egmv48E3cN9xMfxzees4fR1V1e3dGauKkF3FKiA bound on same address {}
[INFO ] 2019-04-17T05:24:38,965Z [Thread-0 (ActiveMQ-client-factory-threads-890463617)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DLJ1Jx3egmv48E3cN9xMfxzees4fR1V1e3dGauKkF3FKiA, inboxQueues=[p2p.inbound.DLJ1Jx3egmv48E3cN9xMfxzees4fR1V1e3dGauKkF3FKiA], sendQueues=[]) {}
[INFO ] 2019-04-17T05:24:38,984Z [Thread-0 (ActiveMQ-client-factory-threads-898650651)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DL25SLM9KzZexTJi5UE9xqoaSyoWnJhfegvaFb7Wa7GQgv, inboxQueues=[p2p.inbound.DL25SLM9KzZexTJi5UE9xqoaSyoWnJhfegvaFb7Wa7GQgv], sendQueues=[]) {}
[INFO ] 2019-04-17T05:24:38,999Z [driver-pool-thread-0] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:38,999Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:39,002Z [driver-pool-thread-0] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:39,003Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T05:24:41,397Z [driver-pool-thread-0] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0FFEA7A9402DE6CE9823563BD017ECADB92A8E0B9D24E798770FB2AB4FE9B5DF, not inserting the second time {}
[INFO ] 2019-04-17T05:24:41,401Z [driver-pool-thread-0] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[WARN ] 2019-04-17T05:24:41,395Z [driver-pool-thread-1] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FCAAF90AA7C9BB3DD7949B0103631C3472482896B52E0F209A64004B259A40AB, not inserting the second time {}
[INFO ] 2019-04-17T05:24:41,411Z [driver-pool-thread-1] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:41,553Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:41,573Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:41,553Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:41,587Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:41,595Z [driver-pool-thread-1] internal.DriverDSLImpl.invoke - Starting in-process Node BankA {}
[INFO ] 2019-04-17T05:24:41,598Z [BankB] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:24:41,621Z [Notary Service] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:24:41,665Z [driver-pool-thread-1] internal.Node.start - Node starting up ... {}
[WARN ] 2019-04-17T05:24:41,666Z [driver-pool-thread-1] internal.Node.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:24:41,849Z [InProcessNode-2-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:41,864Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:41,887Z [InProcessNode-1-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:41,939Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:41,973Z [driver-pool-thread-1] internal.Node.obtainIdentity - identity-private-key not found in key store F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052407.558\BankA\certificates\nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:24:41,992Z [driver-pool-thread-1] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@271d2e2a {}
[INFO ] 2019-04-17T05:24:42,005Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:65095/node {}
[INFO ] 2019-04-17T05:24:42,046Z [driver-pool-thread-1] internal.Node.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:24:42,138Z [driver-pool-thread-1] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:42,140Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:42,357Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:42,424Z [driver-pool-thread-1] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:42,430Z [driver-pool-thread-1] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:42,432Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:42,439Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:42,446Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:42,451Z [driver-pool-thread-1] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:42,718Z [driver-pool-thread-1] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:42,723Z [driver-pool-thread-1] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:42,728Z [driver-pool-thread-1] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:42,734Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10000 {}
[INFO ] 2019-04-17T05:24:42,734Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10009 {}
[INFO ] 2019-04-17T05:24:42,734Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10010 {}
[INFO ] 2019-04-17T05:24:42,674Z [Thread-0 (ActiveMQ-client-factory-threads-634927408)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=cc8478b3-9987-460a-a67e-99066ef8bee8, invocation_timestamp=2019-04-17T05:24:42.659Z, session_id=b79be6f9-1384-4d29-92d1-1ccee262bab1, session_timestamp=2019-04-17T05:24:41.652Z}
[INFO ] 2019-04-17T05:24:42,830Z [driver-pool-thread-0] internal.RPCClient.logElapsedTime - Startup took 1181 msec {}
[INFO ] 2019-04-17T05:24:42,837Z [Thread-0 (ActiveMQ-client-factory-threads-634927408)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=ffe08f92-72e2-45d9-b6ab-cbc060c0e3ac, invocation_timestamp=2019-04-17T05:24:42.837Z, session_id=b79be6f9-1384-4d29-92d1-1ccee262bab1, session_timestamp=2019-04-17T05:24:41.652Z}
[INFO ] 2019-04-17T05:24:42,952Z [Thread-0 (ActiveMQ-client-factory-threads-634927408)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=c5ef29af-b316-489b-a171-afa27763d1bb, invocation_timestamp=2019-04-17T05:24:42.952Z, session_id=b79be6f9-1384-4d29-92d1-1ccee262bab1, session_timestamp=2019-04-17T05:24:41.652Z}
[INFO ] 2019-04-17T05:24:43,006Z [Thread-0 (ActiveMQ-client-factory-threads-634927408)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=aaa86e4a-a43d-4f5a-8988-1d92bb29fbad, invocation_timestamp=2019-04-17T05:24:43.004Z, session_id=b79be6f9-1384-4d29-92d1-1ccee262bab1, session_timestamp=2019-04-17T05:24:41.652Z}
[INFO ] 2019-04-17T05:24:43,101Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=57b6bf5d-44eb-4d58-a332-df005a8c90b7, invocation_timestamp=2019-04-17T05:24:43.101Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[INFO ] 2019-04-17T05:24:43,167Z [driver-pool-thread-0] internal.RPCClient.logElapsedTime - Startup took 142 msec {}
[INFO ] 2019-04-17T05:24:43,180Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=e92de7b6-d35f-4ae7-b800-610acdf3a44d, invocation_timestamp=2019-04-17T05:24:43.179Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[INFO ] 2019-04-17T05:24:43,198Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=f45e3726-9c76-4774-abc4-e01799b09074, invocation_timestamp=2019-04-17T05:24:43.198Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[INFO ] 2019-04-17T05:24:43,207Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=4d4dca40-461c-4181-8f9c-6ec9f6bb511d, invocation_timestamp=2019-04-17T05:24:43.207Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[INFO ] 2019-04-17T05:24:43,720Z [driver-pool-thread-1] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10000 {}
[INFO ] 2019-04-17T05:24:44,543Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:24:44,618Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:24:44,686Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10010 {}
[INFO ] 2019-04-17T05:24:44,730Z [driver-pool-thread-1] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:24:44,764Z [driver-pool-thread-1] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DLFuf9BT8LFZiDJHbpd8AP56p9N7WSyHFLKYTSLVEex37S bound on same address {}
[INFO ] 2019-04-17T05:24:44,878Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:44,880Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:44,885Z [Thread-0 (ActiveMQ-client-factory-threads-330731368)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DLFuf9BT8LFZiDJHbpd8AP56p9N7WSyHFLKYTSLVEex37S, inboxQueues=[p2p.inbound.DLFuf9BT8LFZiDJHbpd8AP56p9N7WSyHFLKYTSLVEex37S], sendQueues=[]) {}
[WARN ] 2019-04-17T05:24:44,990Z [driver-pool-thread-1] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DD80F1FBDF80DB07C6C19F1F7814ED303683BA36990FE37B90036D7696DF2645, not inserting the second time {}
[INFO ] 2019-04-17T05:24:44,995Z [driver-pool-thread-1] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:45,012Z [BankA] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:24:45,028Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:45,073Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:45,114Z [InProcessNode-3-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:45,140Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478671874) {}
[INFO ] 2019-04-17T05:24:45,142Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:45,146Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:45,124Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=7035096c-4736-4efb-9182-a8e129f83f83, invocation_timestamp=2019-04-17T05:24:45.117Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[INFO ] 2019-04-17T05:24:45,174Z [InProcessNode-3-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:45,185Z [InProcessNode-3-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478671869) {}
[INFO ] 2019-04-17T05:24:45,191Z [driver-pool-thread-1] internal.RPCClient.logElapsedTime - Startup took 186 msec {}
[INFO ] 2019-04-17T05:24:45,215Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=13820746-0b41-4369-85b4-aff981537f7a, invocation_timestamp=2019-04-17T05:24:45.215Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[INFO ] 2019-04-17T05:24:45,289Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=9065d4d4-8510-4436-896b-0645ffa4ec56, invocation_timestamp=2019-04-17T05:24:45.289Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[INFO ] 2019-04-17T05:24:46,501Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,501Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,504Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:46,505Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:46,519Z [InProcessNode-2-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,527Z [InProcessNode-1-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,536Z [InProcessNode-2-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,535Z [InProcessNode-1-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478682432) {}
[INFO ] 2019-04-17T05:24:46,555Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=734c852b-f098-4e75-b9c6-ba4e6fc7fc44, invocation_timestamp=2019-04-17T05:24:46.555Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[INFO ] 2019-04-17T05:24:46,567Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=b583fb50-aa93-47c7-9719-26217ab41c9a, invocation_timestamp=2019-04-17T05:24:46.567Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[INFO ] 2019-04-17T05:24:46,590Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=5d62963a-6426-4514-8d43-20e0eec597bb, invocation_timestamp=2019-04-17T05:24:46.590Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[WARN ] 2019-04-17T05:24:46,656Z [Thread-0 (ActiveMQ-client-factory-threads-1949562400)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.1076641631660324698, scheduling for reaping {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=b583fb50-aa93-47c7-9719-26217ab41c9a, invocation_timestamp=2019-04-17T05:24:46.567Z, session_id=6c4ecc96-1ef4-4cb3-9af0-a808300d2d63, session_timestamp=2019-04-17T05:24:45.004Z}
[WARN ] 2019-04-17T05:24:46,677Z [Thread-0 (ActiveMQ-client-factory-threads-1933762053)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.4197824097306499627, scheduling for reaping {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=5d62963a-6426-4514-8d43-20e0eec597bb, invocation_timestamp=2019-04-17T05:24:46.590Z, session_id=7f7b099f-e3f6-4af9-a622-dc10b68a27c2, session_timestamp=2019-04-17T05:24:43.025Z}
[INFO ] 2019-04-17T05:24:46,688Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[WARN ] 2019-04-17T05:24:46,686Z [Thread-0 (ActiveMQ-client-factory-threads-634927408)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.2381065433711723038, scheduling for reaping {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=aaa86e4a-a43d-4f5a-8988-1d92bb29fbad, invocation_timestamp=2019-04-17T05:24:43.004Z, session_id=b79be6f9-1384-4d29-92d1-1ccee262bab1, session_timestamp=2019-04-17T05:24:41.652Z}
[INFO ] 2019-04-17T05:24:49,200Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:24:49,201Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[INFO ] 2019-04-17T05:24:51,607Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:24:51,609Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[INFO ] 2019-04-17T05:24:53,978Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:24:54,079Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\NotaryService",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\NotaryService/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=Notary Service, L=Zurich, C=CH",
    # hardcoded value
    "notary" : {
        # hardcoded value
        "custom" : false,
        # hardcoded value
        "validating" : true
    },
    # hardcoded value
    "p2pAddress" : "localhost:10002",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10003",
        # hardcoded value
        "adminAddress" : "localhost:10004",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10005"
}
 {}
[INFO ] 2019-04-17T05:24:54,118Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052453.982\NotaryService {}
[INFO ] 2019-04-17T05:24:54,136Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\BankB",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\BankB/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=BankB, L=, C=US",
    # hardcoded value
    "p2pAddress" : "localhost:10001",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10006",
        # hardcoded value
        "adminAddress" : "localhost:10007",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10008"
}
 {}
[INFO ] 2019-04-17T05:24:54,157Z [driver-pool-thread-1] internal.DriverDSLImpl.invoke - Starting in-process Node Notary Service {}
[INFO ] 2019-04-17T05:24:54,177Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052453.982\BankB {}
[INFO ] 2019-04-17T05:24:54,190Z [driver-pool-thread-0] config.ConfigHelper.loadConfig - Config:
{
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 20
    "activeMQServer" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 21
        "bridge" : {
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 24
            "maxRetryIntervalMin" : 3,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 22
            "retryIntervalMs" : 5000,
            # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 23
            "retryIntervalMultiplier" : 1.5
        }
    },
    # hardcoded value
    "baseDirectory" : "F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\BankA",
    # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda/3.3-corda/c634cc8e8d8d4440532a3da10d09ca080486319b/corda-3.3-corda.jar!/reference.conf: 6,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-webserver/3.3-corda/676d262432ac6c4e59cb139fd104221b967522b9/corda-webserver-3.3-corda.jar!/reference.conf: 6
    "dataSourceProperties" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 10
        "dataSource.password" : "",
        # merge of reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 8,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
        "dataSource.url" : "jdbc:h2:file:F:\\Development\\workspace\\samples\\cordapp-example\\kotlin-source\\build\\20190417-052453.982\\BankA/persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=100;AUTO_SERVER_PORT=0",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 9
        "dataSource.user" : "sa",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 7
        "dataSourceClassName" : "org.h2.jdbcx.JdbcDataSource"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 12
    "database" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 14
        "exportHibernateJMXStatistics" : "false",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 13
        "transactionIsolationLevel" : "REPEATABLE_READ"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 16
    "devMode" : true,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 2
    "emailAddress" : "admin@company.com",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 3
    "exportJMXto" : "http",
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 31
    "flowTimeout" : {
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 34
        "backoffBase" : 1.8,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 33
        "maxRestartCount" : 5,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 32
        "timeout" : "30 seconds"
    },
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 17
    "h2port" : 0,
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 4
    "keyStorePassword" : "cordacadevpass",
    # hardcoded value
    "myLegalName" : "O=BankA, L=, C=GB",
    # hardcoded value
    "p2pAddress" : "localhost:10000",
    # merge of hardcoded value,reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 27
    "rpcSettings" : {
        # hardcoded value
        "address" : "localhost:10009",
        # hardcoded value
        "adminAddress" : "localhost:10010",
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 29
        "standAloneBroker" : false,
        # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 28
        "useSsl" : false
    },
    # hardcoded value
    "rpcUsers" : [
        # hardcoded value
        {
            # hardcoded value
            "password" : "default",
            # hardcoded value
            "permissions" : [
                # hardcoded value
                "ALL"
            ],
            # hardcoded value
            "username" : "default"
        }
    ],
    # reference.conf @ jar:file:/C:/Users/emman/.gradle/caches/modules-2/files-2.1/net.corda/corda-node/3.3-corda/c617459a941380101a1bf44d91674959c940165d/corda-node-3.3-corda.jar!/reference.conf: 5
    "trustStorePassword" : "trustpass",
    # hardcoded value
    "useTestClock" : false,
    # hardcoded value
    "verifierType" : "InMemory",
    # hardcoded value
    "webAddress" : "localhost:10011"
}
 {}
[INFO ] 2019-04-17T05:24:54,190Z [driver-pool-thread-1] internal.Node.start - Node starting up ... {}
[WARN ] 2019-04-17T05:24:54,194Z [driver-pool-thread-1] internal.Node.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:24:54,209Z [driver-pool-thread-0] network.NodeInfoFilesCopier.addConfig - Now watching: F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052453.982\BankA {}
[INFO ] 2019-04-17T05:24:54,211Z [driver-pool-thread-0] internal.DriverDSLImpl.invoke - Starting in-process Node BankB {}
[INFO ] 2019-04-17T05:24:54,228Z [driver-pool-thread-0] internal.Node.start - Node starting up ... {}
[WARN ] 2019-04-17T05:24:54,230Z [driver-pool-thread-0] internal.Node.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:24:54,235Z [driver-pool-thread-1] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3c245a9a {}
[INFO ] 2019-04-17T05:24:54,251Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:65149/node {}
[INFO ] 2019-04-17T05:24:54,319Z [driver-pool-thread-1] internal.Node.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:24:54,325Z [driver-pool-thread-1] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,330Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,364Z [driver-pool-thread-0] internal.Node.obtainIdentity - identity-private-key not found in key store F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052453.982\BankB\certificates\nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:24:54,426Z [driver-pool-thread-0] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@47bbbd40 {}
[INFO ] 2019-04-17T05:24:54,432Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:65151/node {}
[INFO ] 2019-04-17T05:24:54,502Z [driver-pool-thread-0] internal.Node.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:24:54,505Z [driver-pool-thread-0] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,512Z [driver-pool-thread-0] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,560Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,673Z [driver-pool-thread-0] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:54,691Z [driver-pool-thread-1] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:54,696Z [driver-pool-thread-1] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:54,698Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:24:54,703Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:54,722Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:24:54,723Z [driver-pool-thread-1] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:24:54,798Z [driver-pool-thread-0] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:54,811Z [driver-pool-thread-0] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:54,813Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:24:54,827Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:54,834Z [driver-pool-thread-0] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:24:54,838Z [driver-pool-thread-0] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:24:54,994Z [driver-pool-thread-1] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:54,996Z [driver-pool-thread-1] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:55,000Z [driver-pool-thread-1] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:55,004Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10002 {}
[INFO ] 2019-04-17T05:24:55,004Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10003 {}
[INFO ] 2019-04-17T05:24:55,004Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10004 {}
[INFO ] 2019-04-17T05:24:55,017Z [driver-pool-thread-1] internal.Node.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-04-17T05:24:55,091Z [driver-pool-thread-0] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:55,093Z [driver-pool-thread-0] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:55,101Z [driver-pool-thread-0] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:55,107Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10001 {}
[INFO ] 2019-04-17T05:24:55,107Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10006 {}
[INFO ] 2019-04-17T05:24:55,107Z [driver-pool-thread-0] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10007 {}
[INFO ] 2019-04-17T05:24:56,521Z [driver-pool-thread-1] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10002 {}
[INFO ] 2019-04-17T05:24:56,528Z [driver-pool-thread-0] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10001 {}
[INFO ] 2019-04-17T05:24:58,016Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:58,124Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:58,209Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10004 {}
[INFO ] 2019-04-17T05:24:58,239Z [driver-pool-thread-1] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10002 {}
[INFO ] 2019-04-17T05:24:58,263Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:58,272Z [driver-pool-thread-1] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DLHM8tNYcLaAbrTYKrfVPjCkvfnHotc3WLGgHNyktPrD7k bound on same address {}
[INFO ] 2019-04-17T05:24:58,363Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:58,433Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:58,435Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:58,436Z [Thread-0 (ActiveMQ-client-factory-threads-1937511162)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DLHM8tNYcLaAbrTYKrfVPjCkvfnHotc3WLGgHNyktPrD7k, inboxQueues=[p2p.inbound.DLHM8tNYcLaAbrTYKrfVPjCkvfnHotc3WLGgHNyktPrD7k], sendQueues=[]) {}
[INFO ] 2019-04-17T05:24:58,465Z [driver-pool-thread-0] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10007 {}
[INFO ] 2019-04-17T05:24:58,515Z [driver-pool-thread-0] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10001 {}
[INFO ] 2019-04-17T05:24:58,552Z [driver-pool-thread-0] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DL2tYCW4F7jrqSNvsUCXK1oh5zofjU4qHiAWz18VVQYxuy bound on same address {}
[WARN ] 2019-04-17T05:24:58,593Z [driver-pool-thread-1] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F2E385FE28F509EAE27DFFDE1E4BDCF3D866C4BF752C6AD56323A0AF69C340DF, not inserting the second time {}
[INFO ] 2019-04-17T05:24:58,595Z [driver-pool-thread-1] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:24:58,601Z [driver-pool-thread-1] internal.DriverDSLImpl.invoke - Starting in-process Node BankA {}
[INFO ] 2019-04-17T05:24:58,614Z [driver-pool-thread-1] internal.Node.start - Node starting up ... {}
[WARN ] 2019-04-17T05:24:58,615Z [driver-pool-thread-1] internal.Node.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:24:58,605Z [Notary Service] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:24:58,661Z [driver-pool-thread-0] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:58,665Z [driver-pool-thread-0] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:24:58,674Z [Thread-0 (ActiveMQ-client-factory-threads-1315791578)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DL2tYCW4F7jrqSNvsUCXK1oh5zofjU4qHiAWz18VVQYxuy, inboxQueues=[p2p.inbound.DL2tYCW4F7jrqSNvsUCXK1oh5zofjU4qHiAWz18VVQYxuy], sendQueues=[]) {}
[INFO ] 2019-04-17T05:24:58,767Z [driver-pool-thread-1] internal.Node.obtainIdentity - identity-private-key not found in key store F:\Development\workspace\samples\cordapp-example\kotlin-source\build\20190417-052453.982\BankA\certificates\nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:24:58,803Z [driver-pool-thread-1] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@467e969f {}
[INFO ] 2019-04-17T05:24:58,823Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Database connection url is              : jdbc:h2:tcp://192.168.0.12:65228/node {}
[INFO ] 2019-04-17T05:24:58,843Z [driver-pool-thread-1] internal.Node.invoke - Connected to H2 database. {}
[WARN ] 2019-04-17T05:24:58,843Z [driver-pool-thread-0] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1C0F958ED95ED8AAC5B46FE945C13CA5A3A613458FB098B5BAEE3A20F738A204, not inserting the second time {}
[INFO ] 2019-04-17T05:24:58,846Z [driver-pool-thread-1] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:58,847Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:58,847Z [driver-pool-thread-0] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:24:58,877Z [BankB] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:24:58,966Z [Thread-0 (ActiveMQ-client-factory-threads-616136662)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=88fc4a44-4b01-4026-8dbf-06ffc1add0b9, invocation_timestamp=2019-04-17T05:24:58.966Z, session_id=105a6ae7-2b50-4871-ad2f-94e97cc05de1, session_timestamp=2019-04-17T05:24:58.870Z}
[INFO ] 2019-04-17T05:24:59,000Z [driver-pool-thread-0] internal.RPCClient.logElapsedTime - Startup took 134 msec {}
[INFO ] 2019-04-17T05:24:59,005Z [Thread-0 (ActiveMQ-client-factory-threads-616136662)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=451ed0d0-ddee-427b-b6c1-1e2836f1149f, invocation_timestamp=2019-04-17T05:24:59.005Z, session_id=105a6ae7-2b50-4871-ad2f-94e97cc05de1, session_timestamp=2019-04-17T05:24:58.870Z}
[INFO ] 2019-04-17T05:24:59,024Z [Thread-0 (ActiveMQ-client-factory-threads-616136662)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=af4fe95a-3961-45f5-b7b4-312db57309b7, invocation_timestamp=2019-04-17T05:24:59.024Z, session_id=105a6ae7-2b50-4871-ad2f-94e97cc05de1, session_timestamp=2019-04-17T05:24:58.870Z}
[INFO ] 2019-04-17T05:24:59,030Z [Thread-0 (ActiveMQ-client-factory-threads-616136662)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=ca3ea5b1-ba6e-4045-a7b2-d7c760d0595d, invocation_timestamp=2019-04-17T05:24:59.030Z, session_id=105a6ae7-2b50-4871-ad2f-94e97cc05de1, session_timestamp=2019-04-17T05:24:58.870Z}
[INFO ] 2019-04-17T05:24:59,060Z [driver-pool-thread-1] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:24:59,095Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=444cfd44-1bc7-4a30-8b50-18719b6a4abc, invocation_timestamp=2019-04-17T05:24:59.094Z, session_id=4da95774-96d0-44cd-8b52-e1b575e75886, session_timestamp=2019-04-17T05:24:59.036Z}
[INFO ] 2019-04-17T05:24:59,113Z [driver-pool-thread-0] internal.RPCClient.logElapsedTime - Startup took 79 msec {}
[INFO ] 2019-04-17T05:24:59,118Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=1fc50d14-4404-4df8-9f7c-4e0acac4b399, invocation_timestamp=2019-04-17T05:24:59.118Z, session_id=4da95774-96d0-44cd-8b52-e1b575e75886, session_timestamp=2019-04-17T05:24:59.036Z}
[INFO ] 2019-04-17T05:24:59,135Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=ccf9fa80-3333-4f3e-b650-2835d75b325f, invocation_timestamp=2019-04-17T05:24:59.135Z, session_id=4da95774-96d0-44cd-8b52-e1b575e75886, session_timestamp=2019-04-17T05:24:59.036Z}
[INFO ] 2019-04-17T05:24:59,151Z [driver-pool-thread-1] internal.Node.tryDetectIfNotPublicHost - Detected public IP: 2804:14d:1a85:170f:0:0:0:1003. This will be used instead of the provided "localhost" as the advertised address. {}
[INFO ] 2019-04-17T05:24:59,157Z [driver-pool-thread-1] internal.Node.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:24:59,158Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:24:59,164Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:24:59,169Z [driver-pool-thread-1] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:24:59,170Z [driver-pool-thread-1] internal.Node.updateNodeInfo - New node-info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:24:59,352Z [driver-pool-thread-1] persistence.NodeAttachmentService.invoke - Stored new attachment 04289D6DD339313F3ADD76033F935AC95BE00F677A051F7B1196ADAA88C75247 {}
[WARN ] 2019-04-17T05:24:59,354Z [driver-pool-thread-1] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:24:59,357Z [driver-pool-thread-1] security.RPCSecurityManagerImpl.buildImpl - Constructing realm from list of users in config [User(default, permissions=[ALL])] {}
[INFO ] 2019-04-17T05:24:59,359Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - Advertised P2P messaging addresses      : [2804:14d:1a85:170f:0:0:0:1003]:10000 {}
[INFO ] 2019-04-17T05:24:59,359Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC connection address                  : localhost:10009 {}
[INFO ] 2019-04-17T05:24:59,360Z [driver-pool-thread-1] BasicInfo.printBasicNodeInfo - RPC admin connection address            : localhost:10010 {}
[INFO ] 2019-04-17T05:25:00,096Z [driver-pool-thread-1] messaging.ArtemisMessagingServer.configureAndStartServer - P2P messaging server listening on port 10000 {}
[INFO ] 2019-04-17T05:25:00,958Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:25:01,021Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:25:01,084Z [driver-pool-thread-1] internal.ArtemisMessagingClient.start - Connecting to message broker: localhost:10010 {}
[INFO ] 2019-04-17T05:25:01,115Z [driver-pool-thread-1] messaging.P2PMessagingClient.start - Connecting to message broker: localhost:10000 {}
[INFO ] 2019-04-17T05:25:01,147Z [driver-pool-thread-1] messaging.P2PMessagingClient.createQueueIfAbsent - Create fresh queue p2p.inbound.DL4zyHKkadF47ywKWD84XhTJcnWkxUWSwjG4C1dLTXi7ZC bound on same address {}
[INFO ] 2019-04-17T05:25:01,241Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:25:01,242Z [driver-pool-thread-1] internal.Node.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:25:01,242Z [Thread-0 (ActiveMQ-client-factory-threads-1113838390)] bridging.BridgeControlListener.processControlMessage - Received bridge control message NodeToBridgeSnapshot(nodeIdentity=DL4zyHKkadF47ywKWD84XhTJcnWkxUWSwjG4C1dLTXi7ZC, inboxQueues=[p2p.inbound.DL4zyHKkadF47ywKWD84XhTJcnWkxUWSwjG4C1dLTXi7ZC], sendQueues=[]) {}
[WARN ] 2019-04-17T05:25:01,343Z [driver-pool-thread-1] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3B6CCDF4F723B977A99610C5B4FF17D93BA37CD776396402061AD7C1BE84936B, not inserting the second time {}
[INFO ] 2019-04-17T05:25:01,345Z [driver-pool-thread-1] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:01,355Z [BankA] messaging.RPCServer.start - Starting RPC server with configuration RPCServerConfiguration(rpcThreadPoolSize=4, reapInterval=PT1S, deduplicationCacheExpiry=PT24H) {}
[INFO ] 2019-04-17T05:25:01,368Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:01,386Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:01,406Z [InProcessNode-6-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:01,428Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:01,496Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:01,592Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:01,627Z [InProcessNode-6-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:01,645Z [InProcessNode-6-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:01,651Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=1ef4a632-7c5b-46b4-9951-ef4854eca27f, invocation_timestamp=2019-04-17T05:25:01.651Z, session_id=ed74fa18-c8e5-4489-8ac1-940a1e30cb36, session_timestamp=2019-04-17T05:25:01.352Z}
[INFO ] 2019-04-17T05:25:01,743Z [driver-pool-thread-0] internal.RPCClient.logElapsedTime - Startup took 391 msec {}
[INFO ] 2019-04-17T05:25:01,750Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=8d76290b-2b40-4fa4-98ef-4e50d41170a7, invocation_timestamp=2019-04-17T05:25:01.750Z, session_id=ed74fa18-c8e5-4489-8ac1-940a1e30cb36, session_timestamp=2019-04-17T05:25:01.352Z}
[INFO ] 2019-04-17T05:25:01,775Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=bd291fe2-e309-4444-a653-bb029b0769bd, invocation_timestamp=2019-04-17T05:25:01.775Z, session_id=ed74fa18-c8e5-4489-8ac1-940a1e30cb36, session_timestamp=2019-04-17T05:25:01.352Z}
[INFO ] 2019-04-17T05:25:03,724Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:03,744Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:03,769Z [InProcessNode-4-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:03,810Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10001], legalIdentitiesAndCerts=[O=BankB, L=, C=US], platformVersion=1, serial=1555478694813) {}
[INFO ] 2019-04-17T05:25:03,864Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:03,877Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:03,885Z [InProcessNode-5-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:03,890Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10002], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478694698) {}
[INFO ] 2019-04-17T05:25:03,897Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=c04d404e-0a6f-4db5-a22a-47375518f95f, invocation_timestamp=2019-04-17T05:25:03.897Z, session_id=4da95774-96d0-44cd-8b52-e1b575e75886, session_timestamp=2019-04-17T05:24:59.036Z}
[INFO ] 2019-04-17T05:25:08,604Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,607Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:08,617Z [InProcessNode-4-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,621Z [InProcessNode-4-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,855Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,858Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:25:08,867Z [InProcessNode-5-2] messaging.P2PMessagingClient.updateBridgesOnNetworkChange - Updating bridges on network map change: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,872Z [InProcessNode-5-2] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[[2804:14d:1a85:170f:0:0:0:1003]:10000], legalIdentitiesAndCerts=[O=BankA, L=, C=GB], platformVersion=1, serial=1555478699158) {}
[INFO ] 2019-04-17T05:25:08,877Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=8536cdb0-bdd9-42c5-983e-48f6d7f2391b, invocation_timestamp=2019-04-17T05:25:08.877Z, session_id=ed74fa18-c8e5-4489-8ac1-940a1e30cb36, session_timestamp=2019-04-17T05:25:01.352Z}
[INFO ] 2019-04-17T05:25:19,667Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=2a5ee4cd-3756-4cce-89ee-b72f63748610, invocation_timestamp=2019-04-17T05:25:19.667Z, session_id=ca8074c5-72c7-4537-809d-0ce8d7afe745, session_timestamp=2019-04-17T05:25:18.468Z}
[INFO ] 2019-04-17T05:25:20,719Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=1caa2565-902f-41aa-9cf0-097774d2da94, invocation_timestamp=2019-04-17T05:25:20.719Z, session_id=ca8074c5-72c7-4537-809d-0ce8d7afe745, session_timestamp=2019-04-17T05:25:18.468Z}
[INFO ] 2019-04-17T05:25:23,497Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=c937b098-01e8-46e0-ad9b-9be25c65efa6, invocation_timestamp=2019-04-17T05:25:23.497Z, session_id=ca8074c5-72c7-4537-809d-0ce8d7afe745, session_timestamp=2019-04-17T05:25:18.468Z}
[INFO ] 2019-04-17T05:25:23,501Z [rpc-server-handler-pool-0] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=c937b098-01e8-46e0-ad9b-9be25c65efa6, invocation_timestamp=2019-04-17T05:25:23.497Z, session_id=ca8074c5-72c7-4537-809d-0ce8d7afe745, session_timestamp=2019-04-17T05:25:18.468Z}
[INFO ] 2019-04-17T05:25:35,220Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=e14494a1-a574-4965-b7ac-e7f3baa3936a, invocation_timestamp=2019-04-17T05:25:35.220Z, session_id=334dffc5-1074-4204-8afc-67829605d8c4, session_timestamp=2019-04-17T05:25:34.013Z}
[INFO ] 2019-04-17T05:25:35,882Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=1afeff18-689e-45cd-9eb4-2f8b0e336b8b, invocation_timestamp=2019-04-17T05:25:35.882Z, session_id=334dffc5-1074-4204-8afc-67829605d8c4, session_timestamp=2019-04-17T05:25:34.013Z}
[INFO ] 2019-04-17T05:25:37,848Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.clientArtemisMessageHandler - SUBMITTING {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=22685fcc-14c9-46d2-a5da-defa85eb5577, invocation_timestamp=2019-04-17T05:25:37.848Z, session_id=334dffc5-1074-4204-8afc-67829605d8c4, session_timestamp=2019-04-17T05:25:34.013Z}
[INFO ] 2019-04-17T05:25:37,854Z [rpc-server-handler-pool-0] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=22685fcc-14c9-46d2-a5da-defa85eb5577, invocation_timestamp=2019-04-17T05:25:37.848Z, session_id=334dffc5-1074-4204-8afc-67829605d8c4, session_timestamp=2019-04-17T05:25:34.013Z}
[WARN ] 2019-04-17T05:25:38,381Z [Thread-1 (ActiveMQ-client-factory-threads-1864246577)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.2180898599870283139, scheduling for reaping {actor_id=default, actor_owningIdentity=O=BankA, L=, C=GB, actor_store_id=NODE_CONFIG, invocation_id=c937b098-01e8-46e0-ad9b-9be25c65efa6, invocation_timestamp=2019-04-17T05:25:23.497Z, session_id=ca8074c5-72c7-4537-809d-0ce8d7afe745, session_timestamp=2019-04-17T05:25:18.468Z}
[WARN ] 2019-04-17T05:25:38,391Z [Thread-0 (ActiveMQ-client-factory-threads-677531031)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.6923937383710513660, scheduling for reaping {actor_id=default, actor_owningIdentity=O=BankB, L=, C=US, actor_store_id=NODE_CONFIG, invocation_id=22685fcc-14c9-46d2-a5da-defa85eb5577, invocation_timestamp=2019-04-17T05:25:37.848Z, session_id=334dffc5-1074-4204-8afc-67829605d8c4, session_timestamp=2019-04-17T05:25:34.013Z}
[INFO ] 2019-04-17T05:25:38,399Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[WARN ] 2019-04-17T05:25:38,400Z [Thread-0 (ActiveMQ-client-factory-threads-616136662)] messaging.RPCServer.bindingRemovalArtemisMessageHandler - Detected RPC client disconnect on address rpc.client.default.5975110602990318321, scheduling for reaping {actor_id=default, actor_owningIdentity=O=Notary Service, L=Zurich, C=CH, actor_store_id=NODE_CONFIG, invocation_id=ca3ea5b1-ba6e-4045-a7b2-d7c760d0595d, invocation_timestamp=2019-04-17T05:24:59.030Z, session_id=105a6ae7-2b50-4871-ad2f-94e97cc05de1, session_timestamp=2019-04-17T05:24:58.870Z}
[INFO ] 2019-04-17T05:25:40,847Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:25:40,848Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[INFO ] 2019-04-17T05:25:43,278Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:25:43,279Z [main] BasicInfo.printBasicNodeInfo - Shutting down ... {}
[INFO ] 2019-04-17T05:25:45,753Z [main] internal.Node.stop - Shutdown complete {}
[INFO ] 2019-04-17T05:26:47,101Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-ba20ac5f-06b4-4db7-8028-7cc296b418dd.jar {}
[INFO ] 2019-04-17T05:26:47,155Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-e444f096-3666-45d9-927f-4ebaf54a46c3.jar {}
[INFO ] 2019-04-17T05:26:47,266Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-fdc3b0c0-1215-4fb9-a34e-d137a84af86b.jar {}
[INFO ] 2019-04-17T05:26:47,299Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ba20ac5f-06b4-4db7-8028-7cc296b418dd.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e444f096-3666-45d9-927f-4ebaf54a46c3.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-fdc3b0c0-1215-4fb9-a34e-d137a84af86b.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:26:47,366Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:47,370Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:47,389Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-ba20ac5f-06b4-4db7-8028-7cc296b418dd.jar {}
[INFO ] 2019-04-17T05:26:47,421Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-e444f096-3666-45d9-927f-4ebaf54a46c3.jar {}
[INFO ] 2019-04-17T05:26:47,448Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-fdc3b0c0-1215-4fb9-a34e-d137a84af86b.jar {}
[INFO ] 2019-04-17T05:26:47,601Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2f0b5d79 {}
[INFO ] 2019-04-17T05:26:48,833Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:48,902Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:48,909Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:52,079Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:52,861Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:52,869Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:52,938Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:53,102Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:53,104Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:53,423Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:53,451Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:26:53,686Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:26:53,942Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 648A5082AD83878D979F62EDAC052A9F0D32D2C92A57940B64FE3E9C008C4F97, not inserting the second time {}
[INFO ] 2019-04-17T05:26:54,046Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,076Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:54,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,080Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,084Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:54,086Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,094Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:54,096Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:54,130Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:26:54,144Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@32be264e {}
[INFO ] 2019-04-17T05:26:54,171Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:54,174Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:54,177Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:54,431Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:54,457Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:54,459Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,470Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:54,494Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,496Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,679Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:54,688Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:26:54,744Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6EBC0BA8170BDC68CFDF14E5B9C476D83DE3C3304C2068F7E5FF5C333FDDE4D5, not inserting the second time {}
[INFO ] 2019-04-17T05:26:54,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,768Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:54,787Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:54,791Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,795Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:54,831Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,834Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,847Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:54,850Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,854Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:54,856Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:54,860Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:54,863Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:54,914Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:26:54,934Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@22457838 {}
[INFO ] 2019-04-17T05:26:54,952Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:54,954Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:54,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:55,196Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:55,223Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:55,228Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,233Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:55,246Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,249Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,429Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:55,508Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:26:55,551Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1528211550EDB5D9A692E109806C59850D0F7E80AB7C5D4492D67F0B6D793B53, not inserting the second time {}
[INFO ] 2019-04-17T05:26:55,571Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:55,579Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:55,602Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478812869) {}
[INFO ] 2019-04-17T05:26:55,605Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,618Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:55,701Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,705Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:55,713Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:55,762Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478814459) {}
[INFO ] 2019-04-17T05:26:55,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,794Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:55,888Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,893Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,925Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:55,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,929Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,930Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:55,933Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478815228) {}
[INFO ] 2019-04-17T05:26:55,978Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:26:55,981Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:26:57,184Z [Mock network] flow.[95af2837-24da-4a85-8456-1a6cef32a757].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7107052551778835369). {}
[INFO ] 2019-04-17T05:26:57,402Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7107052551778835369). {invocation_id=aa72ee10-31af-4e24-a21b-5976c14974d3, invocation_timestamp=2019-04-17T05:26:57.391Z, session_id=aa72ee10-31af-4e24-a21b-5976c14974d3, session_timestamp=2019-04-17T05:26:57.391Z}
[INFO ] 2019-04-17T05:26:57,812Z [Mock network] flow.[95af2837-24da-4a85-8456-1a6cef32a757].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4076387293795039548). {}
[INFO ] 2019-04-17T05:26:57,898Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4076387293795039548). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=0efd0e36-199a-4203-b6b7-0dba31f44ac6, invocation_timestamp=2019-04-17T05:26:57.897Z, session_id=0efd0e36-199a-4203-b6b7-0dba31f44ac6, session_timestamp=2019-04-17T05:26:57.897Z}
[INFO ] 2019-04-17T05:26:58,280Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:58,285Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:58,304Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2d239324 {}
[INFO ] 2019-04-17T05:26:58,347Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:58,355Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:58,360Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:58,732Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:58,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:58,763Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,771Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:58,804Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,808Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,922Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:58,925Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:26:58,935Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:26:58,948Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9A991D6BB18FE8AE654B0E50A33F9E92A9850AD02EB3CEC5F8BC9CC97FFD7CFE, not inserting the second time {}
[INFO ] 2019-04-17T05:26:58,957Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,973Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:58,974Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,976Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,977Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:58,978Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:58,984Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:58,986Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:59,019Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:26:59,043Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4feb7abb {}
[INFO ] 2019-04-17T05:26:59,068Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:59,071Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,073Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,190Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,199Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:59,203Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,211Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,217Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,219Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,320Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:59,322Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:26:59,336Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 20E7621B3A8DACBEC22D53529C167BC91AF3A7ACBC78D766F22AB12C52C624B6, not inserting the second time {}
[INFO ] 2019-04-17T05:26:59,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:59,347Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,355Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:59,357Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,361Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,373Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,378Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:59,383Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,386Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:59,387Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,393Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:26:59,398Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:26:59,423Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:26:59,433Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4e5361df {}
[INFO ] 2019-04-17T05:26:59,444Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:26:59,446Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,447Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,586Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:26:59,595Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:26:59,596Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,608Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,704Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:26:59,706Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:26:59,723Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BAC39B15B400CDADA60A31BB50190F92DA0CF37388C6EF3C9A8D042992DF8933, not inserting the second time {}
[INFO ] 2019-04-17T05:26:59,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:59,737Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,748Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478818763) {}
[INFO ] 2019-04-17T05:26:59,749Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,751Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,761Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,762Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,764Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,774Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478819203) {}
[INFO ] 2019-04-17T05:26:59,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,780Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:26:59,811Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,814Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,822Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:59,823Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,825Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,826Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:26:59,827Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478819596) {}
[INFO ] 2019-04-17T05:26:59,828Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:26:59,830Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T05:26:59,936Z [Mock network] flow.[e32084ee-6f88-450d-9dbf-5595ec2d9269].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: E7123ACF56B281272E4A94E1B0455DAB4BC4246E9E13A7C9D9B8B36A8761B03C
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T05:27:00,059Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:00,060Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:00,068Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2375fe4a {}
[INFO ] 2019-04-17T05:27:00,080Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:00,081Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,082Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,221Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,232Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:00,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,240Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:00,258Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,260Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,386Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:00,389Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:27:00,394Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:27:00,406Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3F9D710FDECB91DC78FEB0A01C1C3CF9D9D8ACEDA1C8C5033E09B401EA3DBCFC, not inserting the second time {}
[INFO ] 2019-04-17T05:27:00,414Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,418Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:00,428Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,436Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,438Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:00,442Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,446Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:00,448Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:00,472Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:00,481Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7826c5ef {}
[INFO ] 2019-04-17T05:27:00,494Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:00,496Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,497Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,657Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,665Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:00,666Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,670Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:00,674Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,675Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,779Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:00,781Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:00,796Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 353112883ECE01E1B322FA5308FD64431ED08A5880FA4770A84730AA92CF4EE2, not inserting the second time {}
[INFO ] 2019-04-17T05:27:00,802Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,804Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:00,814Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:00,816Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,818Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:00,830Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,831Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,838Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:00,840Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,841Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,843Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:00,844Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:00,849Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:00,850Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:00,868Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:00,885Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2481db83 {}
[INFO ] 2019-04-17T05:27:00,919Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:00,921Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:00,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:01,083Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:01,096Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:01,097Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,102Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:01,109Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,111Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,214Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:01,218Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:01,242Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B4B20C5546D8C98740529696C87101DB06F0C28690A17286E225199215D3B899, not inserting the second time {}
[INFO ] 2019-04-17T05:27:01,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:01,249Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:01,256Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478820234) {}
[INFO ] 2019-04-17T05:27:01,257Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,259Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:01,285Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,287Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:01,297Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:01,333Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478820666) {}
[INFO ] 2019-04-17T05:27:01,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,341Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:01,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,384Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:01,385Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,386Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,387Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:01,387Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478821097) {}
[INFO ] 2019-04-17T05:27:01,389Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:01,390Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:01,467Z [Mock network] flow.[5f78407a-993a-42cb-acf4-92ec69c2e7f6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8401282566715268556). {}
[INFO ] 2019-04-17T05:27:01,544Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8401282566715268556). {invocation_id=fb2e87f8-b88e-4a44-852d-1bd796e39aca, invocation_timestamp=2019-04-17T05:27:01.542Z, session_id=fb2e87f8-b88e-4a44-852d-1bd796e39aca, session_timestamp=2019-04-17T05:27:01.542Z}
[INFO ] 2019-04-17T05:27:02,265Z [Mock network] flow.[5f78407a-993a-42cb-acf4-92ec69c2e7f6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3773218208895678127). {}
[INFO ] 2019-04-17T05:27:02,318Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3773218208895678127). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=411f09d6-faf2-4186-810b-54f2f0fd0192, invocation_timestamp=2019-04-17T05:27:02.312Z, session_id=411f09d6-faf2-4186-810b-54f2f0fd0192, session_timestamp=2019-04-17T05:27:02.312Z}
[INFO ] 2019-04-17T05:27:02,544Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:02,546Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:02,553Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@26ffe94e {}
[INFO ] 2019-04-17T05:27:02,563Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:02,566Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:02,567Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:02,738Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:02,752Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:02,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,760Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:02,769Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,770Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,879Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:02,881Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:27:02,885Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:27:02,895Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2BF9CD1EC6CD381009256CA556AD67F63731DD96E81FB9DD29E54AEDC956DC35, not inserting the second time {}
[INFO ] 2019-04-17T05:27:02,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,907Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:02,911Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,914Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:02,916Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:02,919Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:02,920Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:02,938Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:02,957Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@64b95cd7 {}
[INFO ] 2019-04-17T05:27:02,966Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:02,967Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:02,968Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:03,097Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:03,105Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:03,107Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,112Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,115Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,117Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,218Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:03,220Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:03,235Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C5A82A974AFC1830DAC3325DE105AA6E15FB79557DC45F7F10A2CFFC327F12F8, not inserting the second time {}
[INFO ] 2019-04-17T05:27:03,240Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:03,242Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:03,253Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,255Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,269Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,272Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:03,274Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,275Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,276Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:03,276Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,279Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:03,280Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:03,293Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:03,299Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6d7453ad {}
[INFO ] 2019-04-17T05:27:03,306Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:03,308Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:03,309Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:03,403Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:03,413Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:03,414Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,418Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,421Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,425Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,534Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:03,535Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:03,552Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 92D45AD21C1E711A83FD93155B260530D009EED35F00E515951C277C3755DEE0, not inserting the second time {}
[INFO ] 2019-04-17T05:27:03,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:03,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478822753) {}
[INFO ] 2019-04-17T05:27:03,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,578Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,587Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,588Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,592Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,599Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478823107) {}
[INFO ] 2019-04-17T05:27:03,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:03,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,609Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,612Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:03,613Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,614Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,615Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:03,615Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478823414) {}
[INFO ] 2019-04-17T05:27:03,616Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:03,617Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:03,686Z [Mock network] flow.[3c71de05-3f56-42a9-9caa-9fcf56d82ca4].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4557148702964681336). {}
[INFO ] 2019-04-17T05:27:03,777Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4557148702964681336). {invocation_id=6885fe66-acbc-4dba-a734-5308ca237326, invocation_timestamp=2019-04-17T05:27:03.776Z, session_id=6885fe66-acbc-4dba-a734-5308ca237326, session_timestamp=2019-04-17T05:27:03.776Z}
[INFO ] 2019-04-17T05:27:03,906Z [Mock network] flow.[3c71de05-3f56-42a9-9caa-9fcf56d82ca4].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6779276547031354201). {}
[INFO ] 2019-04-17T05:27:03,921Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6779276547031354201). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=18a58819-0243-4752-9673-4b46a80d98db, invocation_timestamp=2019-04-17T05:27:03.921Z, session_id=18a58819-0243-4752-9673-4b46a80d98db, session_timestamp=2019-04-17T05:27:03.921Z}
[INFO ] 2019-04-17T05:27:04,015Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:04,016Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:04,020Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a3a236f {}
[INFO ] 2019-04-17T05:27:04,033Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:04,035Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,036Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,142Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,149Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:04,150Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,154Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:04,162Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,163Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,313Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:04,315Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:27:04,319Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:27:04,330Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D5F96A0828FDA0D219867EBE42931AF41C98E2CB879A06B83F0C30FF354BA6AE, not inserting the second time {}
[INFO ] 2019-04-17T05:27:04,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,341Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:04,343Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,346Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:04,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,353Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:04,354Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:04,366Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:04,378Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7d03ce92 {}
[INFO ] 2019-04-17T05:27:04,390Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:04,393Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,394Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,513Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:04,514Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,518Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:04,521Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,522Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,624Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:04,626Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:04,639Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4EE123A6E5F10FE3C5B6CC0B336512562F1AC5FB7BAFAA44E8F8659DD96B4D4A, not inserting the second time {}
[INFO ] 2019-04-17T05:27:04,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,647Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:04,652Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:04,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,654Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:04,661Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,663Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,666Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:04,667Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,667Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,668Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:04,668Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:04,672Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:04,673Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:04,687Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:04,695Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1bfdd7a4 {}
[INFO ] 2019-04-17T05:27:04,701Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:04,703Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,715Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,885Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:04,893Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:04,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:04,906Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:04,909Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:04,910Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,013Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:05,014Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:05,028Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A09B974B43790578215F6A6965FC3D98CCD7B3DC6B4F5D9837E21049AF9D26E7, not inserting the second time {}
[INFO ] 2019-04-17T05:27:05,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:05,035Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:05,043Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478824150) {}
[INFO ] 2019-04-17T05:27:05,044Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,045Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:05,051Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:05,054Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:05,062Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478824514) {}
[INFO ] 2019-04-17T05:27:05,063Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,065Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:05,081Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,083Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,087Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:05,089Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,090Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,091Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:05,092Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478824894) {}
[INFO ] 2019-04-17T05:27:05,093Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:05,094Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:05,166Z [Mock network] flow.[8fed49fc-0295-45aa-ae6c-fae48eb7a81e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4407022454905918502). {}
[INFO ] 2019-04-17T05:27:05,209Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4407022454905918502). {invocation_id=4c30368c-cbb6-439f-9d1c-ba2d32f599a9, invocation_timestamp=2019-04-17T05:27:05.208Z, session_id=4c30368c-cbb6-439f-9d1c-ba2d32f599a9, session_timestamp=2019-04-17T05:27:05.208Z}
[INFO ] 2019-04-17T05:27:05,519Z [Mock network] flow.[8fed49fc-0295-45aa-ae6c-fae48eb7a81e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-762938715181550632). {}
[INFO ] 2019-04-17T05:27:05,539Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-762938715181550632). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f30cf769-3e23-4fa7-a3ba-6e9376139427, invocation_timestamp=2019-04-17T05:27:05.538Z, session_id=f30cf769-3e23-4fa7-a3ba-6e9376139427, session_timestamp=2019-04-17T05:27:05.538Z}
[INFO ] 2019-04-17T05:27:05,632Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:05,634Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:05,640Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3040fba9 {}
[INFO ] 2019-04-17T05:27:05,652Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:05,655Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:05,656Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:05,781Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:05,790Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:05,793Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:05,797Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:05,814Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:05,815Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:05,931Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:05,933Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:27:05,937Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:27:05,960Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EA84B58957E7B355D35A3249BB0965432600378C96A76C303C08A97577134953, not inserting the second time {}
[INFO ] 2019-04-17T05:27:05,978Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,015Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,017Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,018Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,019Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,020Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,037Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:06,038Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:06,062Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:06,070Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4bc5b2cf {}
[INFO ] 2019-04-17T05:27:06,093Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:06,096Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,097Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,200Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,212Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:06,213Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,228Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,235Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,237Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,342Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:06,344Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:06,357Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 39B03834874D2B67FDDCEFD0C04EF5ECCFEBF96FFF95FF8604BADDFD8198261F, not inserting the second time {}
[INFO ] 2019-04-17T05:27:06,362Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,365Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,376Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,378Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,391Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,392Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,395Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,396Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,397Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,397Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,398Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,402Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:27:06,403Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:27:06,422Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:27:06,431Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5f8990af {}
[INFO ] 2019-04-17T05:27:06,437Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:27:06,438Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,439Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,591Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:27:06,598Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:27:06,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,604Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,608Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,707Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:27:06,709Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:27:06,723Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 208B3BE40F038E2828111123C048364F7040D2FAFC6CA16172E9F854887FEABF, not inserting the second time {}
[INFO ] 2019-04-17T05:27:06,728Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,730Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,744Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555478825793) {}
[INFO ] 2019-04-17T05:27:06,745Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,747Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,755Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,759Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,764Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555478826213) {}
[INFO ] 2019-04-17T05:27:06,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,766Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:27:06,778Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,787Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,796Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,797Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,798Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,799Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:27:06,803Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555478826600) {}
[INFO ] 2019-04-17T05:27:06,805Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:06,806Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:27:06,897Z [Mock network] flow.[ec65bd8d-190d-4750-bf86-67054f4c6d05].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7865231570686200748). {}
[INFO ] 2019-04-17T05:27:06,937Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7865231570686200748). {invocation_id=052460f4-44d4-4264-bc65-e42c82c11d28, invocation_timestamp=2019-04-17T05:27:06.935Z, session_id=052460f4-44d4-4264-bc65-e42c82c11d28, session_timestamp=2019-04-17T05:27:06.935Z}
[INFO ] 2019-04-17T05:27:07,081Z [Mock network] flow.[ec65bd8d-190d-4750-bf86-67054f4c6d05].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=448879916744444954). {}
[INFO ] 2019-04-17T05:27:07,092Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=448879916744444954). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=cbd36847-5262-4c56-a739-6f143a6eaab9, invocation_timestamp=2019-04-17T05:27:07.091Z, session_id=cbd36847-5262-4c56-a739-6f143a6eaab9, session_timestamp=2019-04-17T05:27:07.091Z}
[INFO ] 2019-04-17T05:27:07,143Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:27:07,193Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:30:30,102Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-a076a410-517f-4ed0-b5e8-e4c49d8e638f.jar {}
[INFO ] 2019-04-17T05:30:30,232Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-46f4645d-42d2-4bb4-a675-acaa4532960b.jar {}
[INFO ] 2019-04-17T05:30:30,277Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-cfe52815-4a02-4699-99c2-f281150c545f.jar {}
[INFO ] 2019-04-17T05:30:30,310Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a076a410-517f-4ed0-b5e8-e4c49d8e638f.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-46f4645d-42d2-4bb4-a675-acaa4532960b.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-cfe52815-4a02-4699-99c2-f281150c545f.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:30:30,354Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:30,358Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:30,374Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-a076a410-517f-4ed0-b5e8-e4c49d8e638f.jar {}
[INFO ] 2019-04-17T05:30:30,408Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-46f4645d-42d2-4bb4-a675-acaa4532960b.jar {}
[INFO ] 2019-04-17T05:30:30,428Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-cfe52815-4a02-4699-99c2-f281150c545f.jar {}
[INFO ] 2019-04-17T05:30:30,559Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@24455d50 {}
[INFO ] 2019-04-17T05:30:31,464Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:31,529Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:31,536Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:34,262Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:34,985Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:34,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:35,013Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:35,173Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:35,175Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:35,423Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:35,436Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:35,581Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:35,855Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9450B36B2EBCF58A08F78181F55AA779E4B5B899BC67EBCAF2B2B2F8A4A2A44C, not inserting the second time {}
[INFO ] 2019-04-17T05:30:35,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,037Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:36,040Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,048Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:36,052Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,060Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:36,063Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:36,099Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:36,117Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e765313 {}
[INFO ] 2019-04-17T05:30:36,145Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:36,149Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,152Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,370Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,392Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:36,395Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,407Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:36,424Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,426Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,549Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:36,551Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:36,572Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9962330EE2A45BC595A31180D04C50E32F0603F4EACC5B993BFF173BFC444892, not inserting the second time {}
[INFO ] 2019-04-17T05:30:36,580Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,586Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:36,605Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:36,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,612Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:36,630Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,633Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,639Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:36,641Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,643Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,648Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:36,651Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:36,655Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:36,657Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:36,711Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:36,730Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5e4168dd {}
[INFO ] 2019-04-17T05:30:36,753Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:36,755Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,757Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:36,970Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:36,974Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:36,981Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:36,990Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:36,992Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,095Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:37,100Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:37,118Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BEDFED8339DAC9CDB2BC35C30C062B5002A8C2EDD744A615A8FF129544A8D666, not inserting the second time {}
[INFO ] 2019-04-17T05:30:37,126Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:37,129Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:37,141Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479034988) {}
[INFO ] 2019-04-17T05:30:37,143Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,145Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:37,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,173Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:37,179Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:37,221Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479036395) {}
[INFO ] 2019-04-17T05:30:37,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,225Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:37,238Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,239Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,251Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:37,255Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,257Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,258Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:37,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479036974) {}
[INFO ] 2019-04-17T05:30:37,279Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:37,281Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:38,234Z [Mock network] flow.[48bcb991-b324-4cce-b71a-986f7de53d13].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=388404545351283316). {}
[INFO ] 2019-04-17T05:30:38,511Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=388404545351283316). {invocation_id=d7f459a5-aec2-4e81-a897-6811907101ac, invocation_timestamp=2019-04-17T05:30:38.495Z, session_id=d7f459a5-aec2-4e81-a897-6811907101ac, session_timestamp=2019-04-17T05:30:38.495Z}
[INFO ] 2019-04-17T05:30:39,006Z [Mock network] flow.[48bcb991-b324-4cce-b71a-986f7de53d13].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8986884274044870697). {}
[INFO ] 2019-04-17T05:30:39,077Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8986884274044870697). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=1e8c3a58-05bb-42b6-9b97-78b8cdee8af0, invocation_timestamp=2019-04-17T05:30:39.075Z, session_id=1e8c3a58-05bb-42b6-9b97-78b8cdee8af0, session_timestamp=2019-04-17T05:30:39.075Z}
[INFO ] 2019-04-17T05:30:39,444Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:39,446Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:39,452Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@26b37ec {}
[INFO ] 2019-04-17T05:30:39,471Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:39,475Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:39,477Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:39,666Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:39,694Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:39,696Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,721Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:39,740Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,742Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,865Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:39,867Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:39,879Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:39,894Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5218851667AB5FBA7A8842D730A2D8FA86F35F02306AAD8822F9613F53F1F434, not inserting the second time {}
[INFO ] 2019-04-17T05:30:39,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,913Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:39,915Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,918Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:39,919Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:39,924Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:39,926Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:39,958Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:39,976Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7a82be85 {}
[INFO ] 2019-04-17T05:30:39,998Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:40,004Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,006Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,121Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,130Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:40,131Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,136Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,140Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,142Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,240Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:40,242Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:40,257Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AC1195A48631FFB9B85943D128703D3CE1B3CC79C17273480D52D536215BB096, not inserting the second time {}
[INFO ] 2019-04-17T05:30:40,264Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:40,267Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,279Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:40,280Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,283Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,295Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,300Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:40,301Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,302Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,303Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:40,304Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,307Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:40,308Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:40,326Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:40,338Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@75564919 {}
[INFO ] 2019-04-17T05:30:40,351Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:40,353Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,354Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,478Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,486Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:40,508Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,516Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,522Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,525Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,623Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:40,625Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:40,641Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 50AB6819CFB500C186818A6D6F75244FC5FABC0FF613AACD5BA4D13668545330, not inserting the second time {}
[INFO ] 2019-04-17T05:30:40,648Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:40,661Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,672Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479039696) {}
[INFO ] 2019-04-17T05:30:40,673Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,675Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,683Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,684Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,686Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,695Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479040131) {}
[INFO ] 2019-04-17T05:30:40,698Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,703Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:40,727Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,737Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:40,738Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,739Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,740Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:40,741Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479040508) {}
[INFO ] 2019-04-17T05:30:40,742Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:40,744Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T05:30:40,835Z [Mock network] flow.[75acbff0-310c-498e-a32b-edb5d7c518af].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: F43187F56A9D95784D1FDCE235FC33CF359E1173E0D133ACB08BE3A25C45C029
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T05:30:40,969Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:40,970Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:40,977Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25824720 {}
[INFO ] 2019-04-17T05:30:40,988Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:40,989Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:40,990Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,105Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,112Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:41,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,120Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:41,136Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,137Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,244Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:41,246Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:41,252Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:41,263Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 34A180CBDDE12A3B15894AB619C873061259E859B6E0E4A73B36E1B9E4B64D4C, not inserting the second time {}
[INFO ] 2019-04-17T05:30:41,268Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,278Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:41,287Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,303Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:41,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,311Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:41,317Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:41,340Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:41,349Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@56482084 {}
[INFO ] 2019-04-17T05:30:41,362Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:41,364Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,365Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,502Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,520Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:41,521Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,527Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:41,534Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,536Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,633Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:41,635Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:41,649Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8212637AE2E596AA129EB73DBE6E275D99C59F01ACEF3BB25216FDC5DC1950F4, not inserting the second time {}
[INFO ] 2019-04-17T05:30:41,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,658Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:41,668Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:41,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,671Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:41,677Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,682Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:41,683Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,684Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,685Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:41,686Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:41,688Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:41,689Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:41,717Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:41,729Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6eac0029 {}
[INFO ] 2019-04-17T05:30:41,751Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:41,752Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,754Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,889Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:41,910Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:41,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:41,918Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:41,922Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:41,923Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,023Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:42,026Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:42,056Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A020F01D3C75264F64FC0F9772CC18B3D5829B41F971DB0D02A723EBC7CACDB6, not inserting the second time {}
[INFO ] 2019-04-17T05:30:42,065Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:42,067Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:42,083Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479041114) {}
[INFO ] 2019-04-17T05:30:42,084Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,090Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:42,102Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,104Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:42,106Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:42,122Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479041521) {}
[INFO ] 2019-04-17T05:30:42,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,128Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:42,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,152Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,158Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:42,159Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,160Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,161Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:42,164Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479041912) {}
[INFO ] 2019-04-17T05:30:42,165Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:42,166Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:42,227Z [Mock network] flow.[32d2322a-7d06-425f-87fc-be192babd08e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2659174610210446475). {}
[INFO ] 2019-04-17T05:30:42,320Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2659174610210446475). {invocation_id=a0a21488-3363-4439-9a54-80989ace1700, invocation_timestamp=2019-04-17T05:30:42.318Z, session_id=a0a21488-3363-4439-9a54-80989ace1700, session_timestamp=2019-04-17T05:30:42.318Z}
[INFO ] 2019-04-17T05:30:42,509Z [Mock network] flow.[32d2322a-7d06-425f-87fc-be192babd08e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4434198197688492249). {}
[INFO ] 2019-04-17T05:30:42,573Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4434198197688492249). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=4fe68a11-0ba5-49ba-a94c-212df414d5d0, invocation_timestamp=2019-04-17T05:30:42.572Z, session_id=4fe68a11-0ba5-49ba-a94c-212df414d5d0, session_timestamp=2019-04-17T05:30:42.572Z}
[INFO ] 2019-04-17T05:30:42,696Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:42,697Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:42,704Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@582a24c3 {}
[INFO ] 2019-04-17T05:30:42,717Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:42,718Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:42,719Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:42,828Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:42,835Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:42,836Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,841Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:42,853Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,855Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,958Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:42,960Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:42,964Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:42,975Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6E785FF061C3C1CDDBE86710C56AB3752806595622F2E0BE94108CA2B0A1B041, not inserting the second time {}
[INFO ] 2019-04-17T05:30:42,980Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,984Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:42,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,986Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,987Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:42,988Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:42,990Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:42,991Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:43,003Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:43,010Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@78373fdf {}
[INFO ] 2019-04-17T05:30:43,019Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:43,021Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,022Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,140Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,151Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:43,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,161Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,171Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,175Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,275Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:43,277Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:43,293Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 13A652EF4956D0DDFCB358827808F9BFDB680ED4D977C389E102E1C54350E47F, not inserting the second time {}
[INFO ] 2019-04-17T05:30:43,299Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:43,302Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,320Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:43,322Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,324Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,334Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,335Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,339Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:43,340Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,341Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,342Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:43,343Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,346Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:43,389Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:43,406Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:43,414Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@633a4a3d {}
[INFO ] 2019-04-17T05:30:43,423Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:43,425Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,426Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,518Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:43,525Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:43,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,530Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,534Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,535Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,626Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:43,628Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:43,642Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C9CA11343BD4920C6B7E3DD3A58350361F244F79616F306165EAA5F8BD0CC42F, not inserting the second time {}
[INFO ] 2019-04-17T05:30:43,647Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:43,649Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,657Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479042836) {}
[INFO ] 2019-04-17T05:30:43,658Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,660Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,672Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,674Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,684Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479043155) {}
[INFO ] 2019-04-17T05:30:43,685Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,687Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:43,694Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,695Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,702Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:43,704Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,705Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,706Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:43,706Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479043526) {}
[INFO ] 2019-04-17T05:30:43,707Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:43,708Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:43,752Z [Mock network] flow.[eaacd631-e9f3-4f87-8991-f19cec56dea2].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3877443023228407079). {}
[INFO ] 2019-04-17T05:30:43,792Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3877443023228407079). {invocation_id=e05b69ee-117a-4279-9b49-c35a351442f5, invocation_timestamp=2019-04-17T05:30:43.791Z, session_id=e05b69ee-117a-4279-9b49-c35a351442f5, session_timestamp=2019-04-17T05:30:43.791Z}
[INFO ] 2019-04-17T05:30:43,928Z [Mock network] flow.[eaacd631-e9f3-4f87-8991-f19cec56dea2].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=270740012024490565). {}
[INFO ] 2019-04-17T05:30:43,940Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=270740012024490565). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=cadab4f6-0c8d-47c0-8c76-b1df34d08960, invocation_timestamp=2019-04-17T05:30:43.939Z, session_id=cadab4f6-0c8d-47c0-8c76-b1df34d08960, session_timestamp=2019-04-17T05:30:43.939Z}
[INFO ] 2019-04-17T05:30:44,028Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:44,029Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:44,033Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5861073f {}
[INFO ] 2019-04-17T05:30:44,041Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:44,043Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,044Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,139Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,146Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:44,147Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,152Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,160Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,161Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,267Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:44,269Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:44,273Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:44,284Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 851A2D62FF919D3CE2A9DFD1FF8B133D603BBDA6BE7C253D56EF973DACC1A310, not inserting the second time {}
[INFO ] 2019-04-17T05:30:44,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,297Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,298Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,302Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,303Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,319Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:44,320Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:44,334Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:44,342Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1d8f923f {}
[INFO ] 2019-04-17T05:30:44,353Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:44,354Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,356Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,480Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,489Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:44,490Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,494Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,497Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,498Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,592Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:44,594Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:44,607Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 60C73F27900DADE0877F0231AE48D0F963F15B12BBCB338C4909136B108436A1, not inserting the second time {}
[INFO ] 2019-04-17T05:30:44,612Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,614Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,620Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,621Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,622Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,628Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,630Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,633Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,634Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,635Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,635Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,636Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,638Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:44,639Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:44,656Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:44,662Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@50818b2f {}
[INFO ] 2019-04-17T05:30:44,669Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:44,670Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,671Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,767Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:44,775Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:44,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,781Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,785Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,787Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,879Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:44,884Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:44,909Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CC916BD9FCA35C62FACB34992BF5BE9E80CA8A26ED116D3DFE6E72D0A301FF50, not inserting the second time {}
[INFO ] 2019-04-17T05:30:44,934Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,936Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,943Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479044147) {}
[INFO ] 2019-04-17T05:30:44,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,945Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,955Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,956Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,958Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,966Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479044490) {}
[INFO ] 2019-04-17T05:30:44,967Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,969Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:44,975Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,976Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,979Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,980Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,981Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,981Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:44,982Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479044776) {}
[INFO ] 2019-04-17T05:30:44,983Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:44,983Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:45,044Z [Mock network] flow.[bc311860-7ac9-4b4a-9bb7-bedd6b7d5ba3].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5685023675795099888). {}
[INFO ] 2019-04-17T05:30:45,131Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5685023675795099888). {invocation_id=82dab9ea-7e65-4407-91d6-bcce29fc9793, invocation_timestamp=2019-04-17T05:30:45.130Z, session_id=82dab9ea-7e65-4407-91d6-bcce29fc9793, session_timestamp=2019-04-17T05:30:45.130Z}
[INFO ] 2019-04-17T05:30:45,293Z [Mock network] flow.[bc311860-7ac9-4b4a-9bb7-bedd6b7d5ba3].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5120185409000316886). {}
[INFO ] 2019-04-17T05:30:45,311Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5120185409000316886). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=62694117-7acd-4e4e-91b7-32d7b60b5a8e, invocation_timestamp=2019-04-17T05:30:45.310Z, session_id=62694117-7acd-4e4e-91b7-32d7b60b5a8e, session_timestamp=2019-04-17T05:30:45.310Z}
[INFO ] 2019-04-17T05:30:45,409Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:45,410Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:45,416Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3bf27b93 {}
[INFO ] 2019-04-17T05:30:45,431Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:45,433Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,434Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,580Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,586Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:45,587Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,592Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:45,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,602Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,708Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:45,709Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:45,716Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:45,726Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F96906C133AE16B3966E128A2729F3BB6872EF36688DFE4BAE1C4CC1A044DC14, not inserting the second time {}
[INFO ] 2019-04-17T05:30:45,738Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,760Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:45,761Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,762Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,763Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:45,764Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:45,772Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:45,773Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:45,792Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:45,802Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@155f3dd5 {}
[INFO ] 2019-04-17T05:30:45,821Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:45,823Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,824Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,917Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:45,928Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:45,929Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:45,940Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:45,943Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:45,944Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,034Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:46,035Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:46,051Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2243CDA4909A26455E28D33C40A5AE5BC4BA3176A5F923051DEDE76B086ED2E2, not inserting the second time {}
[INFO ] 2019-04-17T05:30:46,057Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:46,059Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,068Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:46,070Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,072Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,079Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,082Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:46,083Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,083Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,084Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:46,084Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,087Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:46,088Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:46,102Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:46,109Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5ee6bcd2 {}
[INFO ] 2019-04-17T05:30:46,123Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:46,125Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:46,126Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:46,271Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:46,278Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:46,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,283Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,286Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,287Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,377Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:46,379Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:46,391Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F74E56A30AEAB9A964B59192F8D889B82ECC46692A83B8C13EF722E507292ACF, not inserting the second time {}
[INFO ] 2019-04-17T05:30:46,396Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:46,397Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,403Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479045587) {}
[INFO ] 2019-04-17T05:30:46,404Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,406Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,411Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,412Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,414Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,420Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479045929) {}
[INFO ] 2019-04-17T05:30:46,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,422Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:46,427Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,428Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,431Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:46,433Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,433Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,434Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:46,435Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479046279) {}
[INFO ] 2019-04-17T05:30:46,436Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:46,436Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:46,498Z [Mock network] flow.[813a4e89-79c5-474e-8e1f-f95076146a9d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4771336740749301998). {}
[INFO ] 2019-04-17T05:30:46,548Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4771336740749301998). {invocation_id=82040ae3-30d2-457c-bc54-72d4eaf41454, invocation_timestamp=2019-04-17T05:30:46.547Z, session_id=82040ae3-30d2-457c-bc54-72d4eaf41454, session_timestamp=2019-04-17T05:30:46.547Z}
[INFO ] 2019-04-17T05:30:46,736Z [Mock network] flow.[813a4e89-79c5-474e-8e1f-f95076146a9d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1845238903611395226). {}
[INFO ] 2019-04-17T05:30:46,746Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1845238903611395226). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=92335cbd-b646-42b1-b5dd-4bfb6f5fbfe5, invocation_timestamp=2019-04-17T05:30:46.745Z, session_id=92335cbd-b646-42b1-b5dd-4bfb6f5fbfe5, session_timestamp=2019-04-17T05:30:46.745Z}
[INFO ] 2019-04-17T05:30:46,782Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:30:46,829Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:30:46,879Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:46,880Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:46,885Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3c928951 {}
[INFO ] 2019-04-17T05:30:46,895Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:46,896Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:46,897Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,008Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,015Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:47,016Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,023Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,051Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,052Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,191Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:47,192Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:30:47,196Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:30:47,205Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CE1EE394C0DAC7DA2CA05438DC007EEAFBA5E7DCE9B0A72B60B3C9B9F11AB341, not inserting the second time {}
[INFO ] 2019-04-17T05:30:47,209Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,212Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,213Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,214Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,214Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,215Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,217Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:47,218Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:47,228Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:47,234Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6d6cd631 {}
[INFO ] 2019-04-17T05:30:47,240Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:47,242Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,242Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,329Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,336Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:47,337Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,340Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,344Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,346Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,442Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:47,443Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:47,462Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B3FDD00EB5075FBC0B818B18E2F5025431F0D083EDD4B172D03E654D42E2A634, not inserting the second time {}
[INFO ] 2019-04-17T05:30:47,468Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,477Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,478Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,484Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,501Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,503Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,506Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,508Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,508Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,509Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,523Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,528Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:30:47,530Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:30:47,554Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:30:47,571Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1ae60fb5 {}
[INFO ] 2019-04-17T05:30:47,580Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:30:47,582Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,583Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,687Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:30:47,711Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:30:47,714Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,724Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,728Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,730Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,837Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:30:47,839Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:30:47,851Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BFE2B910BFB45EB2F61FD497CB4AE509F1C3190CA8670ADD30DD75F8726B5AE3, not inserting the second time {}
[INFO ] 2019-04-17T05:30:47,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,858Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,865Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479047016) {}
[INFO ] 2019-04-17T05:30:47,866Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,868Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,874Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,875Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,876Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,882Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479047337) {}
[INFO ] 2019-04-17T05:30:47,884Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,885Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:30:47,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,891Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,895Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,896Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,897Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,897Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:30:47,898Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479047714) {}
[INFO ] 2019-04-17T05:30:47,904Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:47,905Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:30:48,022Z [Mock network] flow.[9b493a34-e06c-4f2d-8960-f5ca91e20091].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=345825731393214100). {}
[WARN ] 2019-04-17T05:30:48,074Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - class com.example.flow.ExampleFlow$Initiator is not registered: InitialSessionMessage(initiatorSessionId=SessionId(toLong=345825731393214100), initiationEntropy=7607220305464338699, initiatorFlowClassName=com.example.flow.ExampleFlow$Initiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {}
[WARN ] 2019-04-17T05:30:48,117Z [Mock network] flow.[9b493a34-e06c-4f2d-8960-f5ca91e20091].run - Terminated by unexpected exception {}
net.corda.core.flows.UnexpectedFlowEndException: Counterparty sent session rejection message at unexpected time with message class com.example.flow.ExampleFlow$Initiator is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.erroredEnd(FlowStateMachineImpl.kt:497) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.confirmNoError(FlowStateMachineImpl.kt:484) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.waitForMessage(FlowStateMachineImpl.kt:444) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.receiveInternal(FlowStateMachineImpl.kt:376) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.waitForConfirmation(FlowStateMachineImpl.kt:346) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.initiateSession(FlowStateMachineImpl.kt:436) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.sendAndReceive(FlowStateMachineImpl.kt:198) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:29) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:40) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.DataVendingFlow.sendPayloadAndReceiveDataRequest(SendTransactionFlow.kt:70) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.DataVendingFlow.call(SendTransactionFlow.kt:48) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.DataVendingFlow.call(SendTransactionFlow.kt:31) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:142) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:135) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:114) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:93) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-04-17T05:34:20,258Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-b21bb1f7-e844-4ea0-806b-1021f09e463e.jar {}
[INFO ] 2019-04-17T05:34:20,378Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-84a6f867-948c-4e83-9ab2-89cf55e1324b.jar {}
[INFO ] 2019-04-17T05:34:20,411Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-f6521cf9-49cf-4d02-b9b5-d5ecf7c0fc75.jar {}
[INFO ] 2019-04-17T05:34:20,465Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b21bb1f7-e844-4ea0-806b-1021f09e463e.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-84a6f867-948c-4e83-9ab2-89cf55e1324b.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f6521cf9-49cf-4d02-b9b5-d5ecf7c0fc75.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:34:20,497Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:34:20,512Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:34:20,541Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-b21bb1f7-e844-4ea0-806b-1021f09e463e.jar {}
[INFO ] 2019-04-17T05:34:20,573Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-84a6f867-948c-4e83-9ab2-89cf55e1324b.jar {}
[INFO ] 2019-04-17T05:34:20,598Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-f6521cf9-49cf-4d02-b9b5-d5ecf7c0fc75.jar {}
[INFO ] 2019-04-17T05:34:20,684Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4f2d014a {}
[INFO ] 2019-04-17T05:34:21,171Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:34:21,213Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:34:21,224Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:34:22,801Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:34:23,168Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:34:23,176Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479263176) {}
[INFO ] 2019-04-17T05:34:23,211Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:34:23,425Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479263176) {}
[INFO ] 2019-04-17T05:34:23,428Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479263176) {}
[INFO ] 2019-04-17T05:34:23,721Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:34:23,733Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:34:23,832Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:34:23,969Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 909673A26B7C5D2447483FE4FA892D124D51798B99E45201080D3C2220696121, not inserting the second time {}
[INFO ] 2019-04-17T05:35:54,938Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-2a128500-73e4-4a6c-abad-35afeb8cdfc6.jar {}
[INFO ] 2019-04-17T05:35:55,065Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-af456bbb-4b59-4f5e-92ab-44dd7e448b98.jar {}
[INFO ] 2019-04-17T05:35:55,097Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-e49a2cdc-fa1b-4769-89aa-1d030662fdc3.jar {}
[INFO ] 2019-04-17T05:35:55,152Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2a128500-73e4-4a6c-abad-35afeb8cdfc6.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-af456bbb-4b59-4f5e-92ab-44dd7e448b98.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e49a2cdc-fa1b-4769-89aa-1d030662fdc3.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:35:55,195Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:35:55,205Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:35:55,228Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2a128500-73e4-4a6c-abad-35afeb8cdfc6.jar {}
[INFO ] 2019-04-17T05:35:55,263Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-af456bbb-4b59-4f5e-92ab-44dd7e448b98.jar {}
[INFO ] 2019-04-17T05:35:55,289Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-e49a2cdc-fa1b-4769-89aa-1d030662fdc3.jar {}
[INFO ] 2019-04-17T05:35:55,423Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1299fed3 {}
[INFO ] 2019-04-17T05:35:56,477Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:35:56,566Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:35:56,573Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:35:59,451Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:00,190Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:36:00,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:00,214Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:00,379Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:00,382Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:00,624Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:36:00,635Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:36:00,848Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:36:01,166Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 168820FBB91FCBA700AB1A814C8CE3C9D0AF3D939F954F54B326B1D73BF54F86, not inserting the second time {}
[INFO ] 2019-04-17T05:36:01,283Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:01,323Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:01,326Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:01,329Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:01,335Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:01,337Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:01,348Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:36:01,351Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:36:01,411Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:36:01,438Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1ecf20aa {}
[INFO ] 2019-04-17T05:36:01,462Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:36:01,468Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:01,471Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:01,769Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:01,787Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:36:01,789Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:01,806Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:01,832Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:01,834Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,015Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:36:02,017Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:36:02,054Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 179DE1DED68D4792788F30B133C97AC02163BEBF12F2EC8922312CC99B73FEA1, not inserting the second time {}
[INFO ] 2019-04-17T05:36:02,071Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:02,081Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,110Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:02,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,117Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,136Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,138Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,146Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:02,149Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,151Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,153Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:02,155Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,161Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:36:02,163Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:36:02,191Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:36:02,209Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13866e67 {}
[INFO ] 2019-04-17T05:36:02,231Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:36:02,233Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:02,235Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:02,421Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:36:02,434Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:36:02,436Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,442Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,453Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,454Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,562Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:36:02,564Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:36:02,581Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 64070EB250BD0EA924A461B7ED3B221FD52F1C2B4A61CBF1C33F1BE94E7DAA6A, not inserting the second time {}
[INFO ] 2019-04-17T05:36:02,589Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:02,592Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,602Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555479360194) {}
[INFO ] 2019-04-17T05:36:02,604Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,607Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,653Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,662Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,700Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555479361789) {}
[INFO ] 2019-04-17T05:36:02,705Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,708Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:36:02,728Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,730Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,739Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:02,743Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,745Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,747Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:36:02,750Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555479362436) {}
[INFO ] 2019-04-17T05:36:02,772Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:36:02,774Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:36:02,780Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:36:02,782Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:36:03,761Z [Mock network] flow.[29f8517d-e09f-4dcc-a6fb-ae6f84fcc9f5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2242095433929550448). {}
[INFO ] 2019-04-17T05:36:03,988Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2242095433929550448). {invocation_id=96826e5a-5b75-4716-aee6-14c2fd8217e0, invocation_timestamp=2019-04-17T05:36:03.976Z, session_id=96826e5a-5b75-4716-aee6-14c2fd8217e0, session_timestamp=2019-04-17T05:36:03.976Z}
[INFO ] 2019-04-17T05:36:04,472Z [Mock network] flow.[29f8517d-e09f-4dcc-a6fb-ae6f84fcc9f5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3897045484291080842). {}
[INFO ] 2019-04-17T05:36:04,535Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3897045484291080842). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=cd5b8063-4951-453d-998b-3bf2706267d6, invocation_timestamp=2019-04-17T05:36:04.532Z, session_id=cd5b8063-4951-453d-998b-3bf2706267d6, session_timestamp=2019-04-17T05:36:04.532Z}
[INFO ] 2019-04-17T05:36:04,682Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:36:04,760Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:36:04,785Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: LinearStateQueryCriteria(participants=null, uuid=[aa52ff68-2347-4a9f-a060-6b4710ac7f8d], externalId=[], status=UNCONSUMED, contractStateTypes=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:36:04,922Z [Mock network] flow.[96f85f8e-b9e5-485c-91bc-976949749d17].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5240920043328591788). {}
[INFO ] 2019-04-17T05:36:05,002Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5240920043328591788). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=a814983c-5875-468a-a05b-41e75a214adf, invocation_timestamp=2019-04-17T05:36:04.993Z, session_id=a814983c-5875-468a-a05b-41e75a214adf, session_timestamp=2019-04-17T05:36:04.993Z}
[INFO ] 2019-04-17T05:36:05,255Z [Mock network] flow.[96f85f8e-b9e5-485c-91bc-976949749d17].initiateSession - Initiating flow session with party O=Notary Service, L=Zurich, C=CH. Session id for tracing purposes is SessionId(toLong=-4789822319270657589). {}
[INFO ] 2019-04-17T05:36:05,317Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4789822319270657589). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=e000cac4-45e1-4c02-9ec2-99178a8a0f53, invocation_timestamp=2019-04-17T05:36:05.312Z, session_id=e000cac4-45e1-4c02-9ec2-99178a8a0f53, session_timestamp=2019-04-17T05:36:05.312Z}
[INFO ] 2019-04-17T05:36:05,358Z [Mock network] flow.[5275a8b8-8089-45ad-9b73-b14ce4e6993b].call - Requesting 1 dependency(s) for verification from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:36:05,542Z [Mock network] flow.[5275a8b8-8089-45ad-9b73-b14ce4e6993b].call - Fetched 1 elements from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:36:05,632Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[6DCC0F6AE401D9F3782351A076E0299B2CA1AE8FD6F784D8E4EF0DA40AD1503C(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:36:05,650Z [Mock network] flow.[96f85f8e-b9e5-485c-91bc-976949749d17].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5277377390135124955). {}
[INFO ] 2019-04-17T05:36:05,666Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5277377390135124955). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=7a397863-1a9d-4fa1-ba97-35c00d10bfc3, invocation_timestamp=2019-04-17T05:36:05.665Z, session_id=7a397863-1a9d-4fa1-ba97-35c00d10bfc3, session_timestamp=2019-04-17T05:36:05.665Z}
[INFO ] 2019-04-17T05:36:05,695Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[6DCC0F6AE401D9F3782351A076E0299B2CA1AE8FD6F784D8E4EF0DA40AD1503C(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:36:05,749Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:37,079Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-525eb6f9-1e0e-4a30-972c-577da3625b8b.jar {}
[INFO ] 2019-04-17T05:46:37,235Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-fd02d634-e4a2-468b-9a5d-8cb50726b91d.jar {}
[INFO ] 2019-04-17T05:46:37,339Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-352c2705-14b7-4ff0-b30c-2967c2050a70.jar {}
[INFO ] 2019-04-17T05:46:37,374Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-525eb6f9-1e0e-4a30-972c-577da3625b8b.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fd02d634-e4a2-468b-9a5d-8cb50726b91d.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-352c2705-14b7-4ff0-b30c-2967c2050a70.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:46:37,420Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:37,432Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:37,453Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-525eb6f9-1e0e-4a30-972c-577da3625b8b.jar {}
[INFO ] 2019-04-17T05:46:37,482Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-fd02d634-e4a2-468b-9a5d-8cb50726b91d.jar {}
[INFO ] 2019-04-17T05:46:37,507Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-352c2705-14b7-4ff0-b30c-2967c2050a70.jar {}
[INFO ] 2019-04-17T05:46:37,638Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@31dbca5d {}
[INFO ] 2019-04-17T05:46:38,573Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:38,638Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:38,645Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:41,482Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:42,235Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:42,240Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:42,264Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:42,435Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:42,438Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:42,698Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:42,718Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:42,904Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:43,236Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 878820CDB26D353D82E02E15789F52B103E99B1A0317D1B21D4CB3A26564F484, not inserting the second time {}
[INFO ] 2019-04-17T05:46:43,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:43,459Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:43,469Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:43,472Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:43,480Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:43,483Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:43,495Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:43,499Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:43,577Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:43,604Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5eb39c06 {}
[INFO ] 2019-04-17T05:46:43,627Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:43,631Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:43,633Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:43,891Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:43,909Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:43,915Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:43,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:43,948Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:43,950Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,183Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:44,188Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:44,262Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key ABF513351C89CBCD933E83DEF88216633D347AA75A7EA4EC3925E57F2440BE2F, not inserting the second time {}
[INFO ] 2019-04-17T05:46:44,289Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:44,312Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:44,363Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:44,367Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,374Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:44,438Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,440Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,457Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:44,460Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,462Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,464Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:44,465Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:44,471Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:44,473Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:44,528Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:44,546Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2d980dc3 {}
[INFO ] 2019-04-17T05:46:44,572Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:44,584Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:44,590Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:44,864Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:44,875Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:44,877Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:44,883Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:44,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:44,892Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:44,997Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:45,001Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:45,031Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 319527748C9656AEC958AEE85CACFDA6E1892DCE185AF29C4CBE1A51D704E9DD, not inserting the second time {}
[INFO ] 2019-04-17T05:46:45,043Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:45,047Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:45,065Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480002240) {}
[INFO ] 2019-04-17T05:46:45,067Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,071Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:45,108Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,119Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:45,131Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:45,153Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480003915) {}
[INFO ] 2019-04-17T05:46:45,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,159Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:45,185Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,198Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:45,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,202Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:45,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480004877) {}
[INFO ] 2019-04-17T05:46:45,229Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:45,231Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:46,405Z [Mock network] flow.[e8b81af4-1dd2-4b88-ad08-2397b5d8360c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5556179395371330430). {}
[INFO ] 2019-04-17T05:46:46,673Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5556179395371330430). {invocation_id=1f87250e-54c9-4856-ac6f-0557dd105c1a, invocation_timestamp=2019-04-17T05:46:46.654Z, session_id=1f87250e-54c9-4856-ac6f-0557dd105c1a, session_timestamp=2019-04-17T05:46:46.654Z}
[INFO ] 2019-04-17T05:46:47,169Z [Mock network] flow.[e8b81af4-1dd2-4b88-ad08-2397b5d8360c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6068462739016879241). {}
[INFO ] 2019-04-17T05:46:47,255Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6068462739016879241). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=b7567a9e-0308-4a03-a5c1-bdbdb5ca7cb4, invocation_timestamp=2019-04-17T05:46:47.254Z, session_id=b7567a9e-0308-4a03-a5c1-bdbdb5ca7cb4, session_timestamp=2019-04-17T05:46:47.254Z}
[INFO ] 2019-04-17T05:46:47,607Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:47,612Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:47,621Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@543e228c {}
[INFO ] 2019-04-17T05:46:47,640Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:47,641Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:47,643Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:47,924Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:47,935Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:47,936Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:47,940Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:47,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:47,953Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,070Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:48,073Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:48,081Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:48,095Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 671B4B5EEACE6C00EDA6F2EF13BED4242EE2C821F479A4C98FD86837FBE6834E, not inserting the second time {}
[INFO ] 2019-04-17T05:46:48,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,119Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:48,131Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,133Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,135Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:48,136Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,142Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:48,147Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:48,184Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:48,203Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@767c69d4 {}
[INFO ] 2019-04-17T05:46:48,233Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:48,236Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,238Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,383Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,397Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:48,399Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,403Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:48,407Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,409Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,543Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:48,545Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:48,561Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1250196C8147CCEDD543166601CA83870B4CD12EDB1766C0F50953D0633DAD13, not inserting the second time {}
[INFO ] 2019-04-17T05:46:48,567Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,572Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:48,583Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,585Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,589Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:48,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,606Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:48,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,610Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,615Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:48,618Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:48,621Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:48,629Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:48,648Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:48,663Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5a21746a {}
[INFO ] 2019-04-17T05:46:48,685Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:48,688Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,689Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,841Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:48,850Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:48,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:48,859Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:48,864Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:48,865Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:48,957Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:48,959Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:48,976Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AE37DC8E500B871EB4372F07133EB784B80F1F058B884B21C3446E541C891B71, not inserting the second time {}
[INFO ] 2019-04-17T05:46:48,981Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,984Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:48,995Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480007936) {}
[INFO ] 2019-04-17T05:46:48,996Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:48,998Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:49,006Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,007Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:49,009Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:49,024Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480008399) {}
[INFO ] 2019-04-17T05:46:49,026Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,029Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:49,057Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,068Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:49,069Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,070Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,071Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:49,072Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480008852) {}
[INFO ] 2019-04-17T05:46:49,078Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:49,080Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T05:46:49,185Z [Mock network] flow.[0788b13c-68c1-41a1-9140-2d21e14b7a99].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: 6D4A759EE008DED5C9CE238A0AAEFFF755637AC032E9A90F6D696544F89E6E62
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T05:46:49,329Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:49,331Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:49,336Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2aea50a6 {}
[INFO ] 2019-04-17T05:46:49,346Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:49,348Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,349Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,479Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,486Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:49,490Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,496Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:49,508Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,510Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,615Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:49,617Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:49,622Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:49,633Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 29813AE85A073E745FC6EEDB9E4BACB548F7E265DE7C07B8FD0D74BEB6F7AC0B, not inserting the second time {}
[INFO ] 2019-04-17T05:46:49,638Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,646Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:49,651Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,663Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,664Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:49,665Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:49,670Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:49,672Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:49,692Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:49,705Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@517fd762 {}
[INFO ] 2019-04-17T05:46:49,720Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:49,721Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,722Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,885Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:49,900Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:49,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:49,907Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:49,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:49,914Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,017Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:50,019Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:50,038Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6B06632E32EE1C32E6DB856105F35EB022AB1CB85A754DF461CFF32C15AA6E88, not inserting the second time {}
[INFO ] 2019-04-17T05:46:50,046Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:50,048Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,063Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:50,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,066Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,080Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,085Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:50,086Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,087Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,094Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:50,096Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,099Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:50,100Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:50,156Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:50,182Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13e4acf6 {}
[INFO ] 2019-04-17T05:46:50,202Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:50,204Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:50,205Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:50,306Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:50,320Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:50,321Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,326Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,329Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,331Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,426Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:50,428Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:50,442Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5506DF7F3ADE02F6F1B55AEE28D437C387511DDE8E4A31FB2C42455E21666732, not inserting the second time {}
[INFO ] 2019-04-17T05:46:50,449Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:50,451Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,458Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480009489) {}
[INFO ] 2019-04-17T05:46:50,460Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,466Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,474Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,475Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,477Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,484Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480009901) {}
[INFO ] 2019-04-17T05:46:50,486Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,488Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:50,500Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,504Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,515Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:50,516Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,517Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,517Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:50,518Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480010321) {}
[INFO ] 2019-04-17T05:46:50,519Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:50,520Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:50,616Z [Mock network] flow.[e8a31ed3-c64f-46b3-8758-63a3e5a60a81].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6706042806373389302). {}
[INFO ] 2019-04-17T05:46:50,710Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6706042806373389302). {invocation_id=1c2d6745-59e4-487d-8bcc-219ef47205f5, invocation_timestamp=2019-04-17T05:46:50.707Z, session_id=1c2d6745-59e4-487d-8bcc-219ef47205f5, session_timestamp=2019-04-17T05:46:50.707Z}
[INFO ] 2019-04-17T05:46:51,032Z [Mock network] flow.[e8a31ed3-c64f-46b3-8758-63a3e5a60a81].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6461729179940041130). {}
[INFO ] 2019-04-17T05:46:51,056Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6461729179940041130). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=a866ad71-2be3-4440-b706-8d4cdead259f, invocation_timestamp=2019-04-17T05:46:51.055Z, session_id=a866ad71-2be3-4440-b706-8d4cdead259f, session_timestamp=2019-04-17T05:46:51.055Z}
[INFO ] 2019-04-17T05:46:51,247Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:51,248Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:51,263Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@56cee7f6 {}
[INFO ] 2019-04-17T05:46:51,279Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:51,281Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,282Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,448Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,455Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:51,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,461Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:51,475Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,477Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,575Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:51,577Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:51,583Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:51,592Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B101E73C2DDC95C05A569FD3E15CB2822F2DC89806518F79B2115F0DC9B87FC6, not inserting the second time {}
[INFO ] 2019-04-17T05:46:51,598Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,602Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:51,603Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,604Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,605Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:51,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,609Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:51,611Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:51,625Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:51,633Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@c5aa143 {}
[INFO ] 2019-04-17T05:46:51,640Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:51,641Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,643Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,762Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:51,772Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:51,773Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,778Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:51,783Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,785Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,881Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:51,882Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:51,894Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 87641B0D022511B2DFA2D4FA26B9017B074A916219C7899943E6F51E648A0E4C, not inserting the second time {}
[INFO ] 2019-04-17T05:46:51,932Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,934Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:51,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:51,958Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,961Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:51,971Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,972Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,976Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:51,977Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,978Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,979Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:51,980Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:51,983Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:51,984Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:51,997Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:52,003Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7073b501 {}
[INFO ] 2019-04-17T05:46:52,013Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:52,014Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,015Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,103Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,112Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:52,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,118Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,122Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,123Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,215Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:52,217Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:52,236Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F60AEECAE4CF737215095EE83BCB08D59E48A0C024ABABA972D2075E00972F35, not inserting the second time {}
[INFO ] 2019-04-17T05:46:52,241Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:52,245Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,251Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480011456) {}
[INFO ] 2019-04-17T05:46:52,252Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,256Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,264Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,265Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:52,266Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,272Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480011773) {}
[INFO ] 2019-04-17T05:46:52,273Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,275Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,283Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,289Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:52,291Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,292Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,293Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:52,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480012114) {}
[INFO ] 2019-04-17T05:46:52,295Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:52,296Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:52,348Z [Mock network] flow.[ce6d3a48-3c43-4908-9491-3d6b0f9e4c65].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5823748184955621835). {}
[INFO ] 2019-04-17T05:46:52,394Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5823748184955621835). {invocation_id=def63891-e4f1-4641-b07c-66419fb0a076, invocation_timestamp=2019-04-17T05:46:52.393Z, session_id=def63891-e4f1-4641-b07c-66419fb0a076, session_timestamp=2019-04-17T05:46:52.393Z}
[INFO ] 2019-04-17T05:46:52,549Z [Mock network] flow.[ce6d3a48-3c43-4908-9491-3d6b0f9e4c65].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=709931860729644718). {}
[INFO ] 2019-04-17T05:46:52,559Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=709931860729644718). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=e222f962-1be7-42e2-aafc-d751c45d7320, invocation_timestamp=2019-04-17T05:46:52.559Z, session_id=e222f962-1be7-42e2-aafc-d751c45d7320, session_timestamp=2019-04-17T05:46:52.559Z}
[INFO ] 2019-04-17T05:46:52,663Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:52,664Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:52,671Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@269abd62 {}
[INFO ] 2019-04-17T05:46:52,718Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:52,720Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,720Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,829Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:52,838Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:52,839Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,843Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:52,852Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,855Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,964Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:52,965Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:52,970Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:52,980Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E67AD35304E93032127E20BFC0E242DA913EB010AD66D7D6A275C62F41EB5E67, not inserting the second time {}
[INFO ] 2019-04-17T05:46:52,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,995Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:52,996Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,997Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:52,998Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:53,000Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:53,006Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:53,009Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:53,022Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:53,028Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4ddb3312 {}
[INFO ] 2019-04-17T05:46:53,048Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:53,050Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,164Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,171Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:53,173Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,180Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,181Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,279Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:53,289Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:53,311Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0FB7F31BC3E672AE37FB472C6EC1928CEE1ACB21CC29B808ECC08758CB51B76B, not inserting the second time {}
[INFO ] 2019-04-17T05:46:53,318Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:53,320Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,333Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:53,335Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,336Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,345Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,346Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,351Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:53,352Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,353Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,354Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:53,354Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,357Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:53,358Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:53,443Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:53,463Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@690a7fcf {}
[INFO ] 2019-04-17T05:46:53,490Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:53,491Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,493Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,610Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:53,617Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:53,618Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,622Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,626Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,627Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,730Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:53,732Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:53,745Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D935EE1CD50125E879A29FD31C5EFBEB7F37761ACBD0FE4267AE52796B5AA50B, not inserting the second time {}
[INFO ] 2019-04-17T05:46:53,749Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:53,751Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,758Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480012839) {}
[INFO ] 2019-04-17T05:46:53,759Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,760Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,767Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,768Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,769Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480013173) {}
[INFO ] 2019-04-17T05:46:53,780Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,782Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:53,792Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,794Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,799Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:53,800Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,800Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,801Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:53,802Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480013618) {}
[INFO ] 2019-04-17T05:46:53,802Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:53,803Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:53,869Z [Mock network] flow.[6e83b302-2449-4d69-b953-f6fbc1294c8c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5959562239813212289). {}
[INFO ] 2019-04-17T05:46:53,981Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5959562239813212289). {invocation_id=423b5043-cb40-4625-b012-e4425db226ab, invocation_timestamp=2019-04-17T05:46:53.980Z, session_id=423b5043-cb40-4625-b012-e4425db226ab, session_timestamp=2019-04-17T05:46:53.980Z}
[INFO ] 2019-04-17T05:46:54,260Z [Mock network] flow.[6e83b302-2449-4d69-b953-f6fbc1294c8c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2872517952093024424). {}
[INFO ] 2019-04-17T05:46:54,290Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2872517952093024424). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=2ec647db-1007-436c-b72d-7151e6a6b5a2, invocation_timestamp=2019-04-17T05:46:54.289Z, session_id=2ec647db-1007-436c-b72d-7151e6a6b5a2, session_timestamp=2019-04-17T05:46:54.289Z}
[INFO ] 2019-04-17T05:46:54,402Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:54,403Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:54,407Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@39e17209 {}
[INFO ] 2019-04-17T05:46:54,429Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:54,430Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,431Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,538Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,545Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:54,547Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,552Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:54,563Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,564Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,726Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:54,728Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:54,732Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:54,741Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E110A1A66EACCFB06AB998C270BD320BC4AA3AC87290E8D937C028505BE87B2D, not inserting the second time {}
[INFO ] 2019-04-17T05:46:54,747Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,751Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:54,752Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,754Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:54,755Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:54,758Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:54,759Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:54,773Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:54,789Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4dc68ffe {}
[INFO ] 2019-04-17T05:46:54,803Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:54,806Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,807Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:54,910Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:54,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:54,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:54,934Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:54,935Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,049Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:55,051Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:55,073Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E13F4A207EA6AD0FCE69F5ECA78EB182737606C5E7DDC6FB199E45BF97917604, not inserting the second time {}
[INFO ] 2019-04-17T05:46:55,080Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:55,090Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,100Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:55,101Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,103Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,127Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,132Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:55,133Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,133Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,134Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:55,134Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,141Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:55,142Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:55,167Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:55,180Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5a416df1 {}
[INFO ] 2019-04-17T05:46:55,193Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:55,195Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:55,196Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:55,390Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:55,412Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:55,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,426Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,433Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,434Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,559Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:55,561Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:55,573Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C439202A1910C91D540F8BC95B71A0EF9E4E3FA04A92B5F58F29DA02467401D9, not inserting the second time {}
[INFO ] 2019-04-17T05:46:55,578Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:55,580Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,586Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480014547) {}
[INFO ] 2019-04-17T05:46:55,587Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,588Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,594Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,595Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,597Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,602Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480014912) {}
[INFO ] 2019-04-17T05:46:55,603Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,604Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:55,615Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,615Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,618Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:55,619Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,620Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,621Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:55,622Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480015413) {}
[INFO ] 2019-04-17T05:46:55,623Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:55,624Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:55,695Z [Mock network] flow.[548f7317-f56c-48b5-b5b1-04893a45c31d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2477015317393096472). {}
[INFO ] 2019-04-17T05:46:55,763Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2477015317393096472). {invocation_id=26c9e9bd-97b5-45c3-8b22-2bd292a7bb64, invocation_timestamp=2019-04-17T05:46:55.762Z, session_id=26c9e9bd-97b5-45c3-8b22-2bd292a7bb64, session_timestamp=2019-04-17T05:46:55.762Z}
[INFO ] 2019-04-17T05:46:55,896Z [Mock network] flow.[548f7317-f56c-48b5-b5b1-04893a45c31d].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5977177195607522277). {}
[INFO ] 2019-04-17T05:46:55,906Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5977177195607522277). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=d55cc001-99a2-4462-b8cc-6ed0e71f9ceb, invocation_timestamp=2019-04-17T05:46:55.906Z, session_id=d55cc001-99a2-4462-b8cc-6ed0e71f9ceb, session_timestamp=2019-04-17T05:46:55.906Z}
[INFO ] 2019-04-17T05:46:55,942Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:55,988Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:56,046Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:56,047Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:56,051Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1048564e {}
[INFO ] 2019-04-17T05:46:56,059Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:56,062Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,064Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,209Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,215Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:56,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,220Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:56,231Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,232Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,363Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:56,364Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:46:56,368Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:46:56,378Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B241EEA8D091A1896D98B232F1C34463CAE7B6624391A1FDECA1E52A9407C730, not inserting the second time {}
[INFO ] 2019-04-17T05:46:56,382Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,387Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:56,388Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,389Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:56,390Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,392Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:56,393Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:56,407Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:56,413Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@bf154bb {}
[INFO ] 2019-04-17T05:46:56,426Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:56,427Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,428Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,545Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,558Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:56,560Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,577Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:56,580Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,581Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,721Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:56,726Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:56,747Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 02F368169A74C800D9D5B67F5501C1923ADB1F50DEF22E39246FA25A5F631531, not inserting the second time {}
[INFO ] 2019-04-17T05:46:56,753Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,756Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:56,762Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:56,763Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,764Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:56,775Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,792Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:56,800Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,801Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,801Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:56,835Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:56,847Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:46:56,849Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:46:56,883Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:46:56,897Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5607f2fc {}
[INFO ] 2019-04-17T05:46:56,905Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:46:56,906Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:56,907Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:57,017Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:46:57,051Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:46:57,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,056Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:57,067Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,068Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,200Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:46:57,202Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:46:57,217Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1C7E05D9664664355963CB687305C5EEE8069C684EF8F18A4E13C227B5CF6DE2, not inserting the second time {}
[INFO ] 2019-04-17T05:46:57,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:57,226Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:57,234Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480016216) {}
[INFO ] 2019-04-17T05:46:57,235Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,238Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:57,247Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,252Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:57,253Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:57,263Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480016560) {}
[INFO ] 2019-04-17T05:46:57,264Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,267Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:46:57,272Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,273Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,282Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:57,283Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,285Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:46:57,285Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480017052) {}
[INFO ] 2019-04-17T05:46:57,286Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:57,288Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:57,296Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:57,297Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:46:57,345Z [Mock network] flow.[07ca781b-1ea4-48e7-8110-cfa88edfe16b].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8990478207021980189). {}
[INFO ] 2019-04-17T05:46:57,401Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8990478207021980189). {invocation_id=1a18e6ab-5c90-4955-98d9-4a1980e4a789, invocation_timestamp=2019-04-17T05:46:57.400Z, session_id=1a18e6ab-5c90-4955-98d9-4a1980e4a789, session_timestamp=2019-04-17T05:46:57.400Z}
[INFO ] 2019-04-17T05:46:57,665Z [Mock network] flow.[07ca781b-1ea4-48e7-8110-cfa88edfe16b].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2341444963662125480). {}
[INFO ] 2019-04-17T05:46:57,692Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2341444963662125480). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=fc816d44-4846-4810-b7cd-17a6790b19af, invocation_timestamp=2019-04-17T05:46:57.691Z, session_id=fc816d44-4846-4810-b7cd-17a6790b19af, session_timestamp=2019-04-17T05:46:57.691Z}
[INFO ] 2019-04-17T05:46:57,736Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:57,744Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:57,765Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: LinearStateQueryCriteria(participants=null, uuid=[d762911f-70fb-42a2-88a4-62133e25b5bf], externalId=[], status=UNCONSUMED, contractStateTypes=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:57,814Z [Mock network] flow.[9e352dc1-ebdd-4d90-8c56-80876d2b8873].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8696261210919619921). {}
[INFO ] 2019-04-17T05:46:57,834Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8696261210919619921). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=b9267ca1-9327-49c9-9e85-cf7050b8b90d, invocation_timestamp=2019-04-17T05:46:57.833Z, session_id=b9267ca1-9327-49c9-9e85-cf7050b8b90d, session_timestamp=2019-04-17T05:46:57.833Z}
[INFO ] 2019-04-17T05:46:57,933Z [Mock network] flow.[9e352dc1-ebdd-4d90-8c56-80876d2b8873].initiateSession - Initiating flow session with party O=Notary Service, L=Zurich, C=CH. Session id for tracing purposes is SessionId(toLong=-3983435309089191031). {}
[INFO ] 2019-04-17T05:46:57,964Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3983435309089191031). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f99521b6-54c0-4d2c-b4f2-007c23e6c10a, invocation_timestamp=2019-04-17T05:46:57.960Z, session_id=f99521b6-54c0-4d2c-b4f2-007c23e6c10a, session_timestamp=2019-04-17T05:46:57.960Z}
[INFO ] 2019-04-17T05:46:57,982Z [Mock network] flow.[28b56e6a-cd80-4f52-ba2f-41a09d7ad577].call - Requesting 1 dependency(s) for verification from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:46:58,085Z [Mock network] flow.[28b56e6a-cd80-4f52-ba2f-41a09d7ad577].call - Fetched 1 elements from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:46:58,170Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[B31E16F7288E66D4E3452CA22BD2D37D0CE02D10C34D093C20619091D939B6AB(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:58,187Z [Mock network] flow.[9e352dc1-ebdd-4d90-8c56-80876d2b8873].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1405023821919753542). {}
[INFO ] 2019-04-17T05:46:58,213Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1405023821919753542). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=c3d53154-b180-4296-a9aa-782186c6d010, invocation_timestamp=2019-04-17T05:46:58.208Z, session_id=c3d53154-b180-4296-a9aa-782186c6d010, session_timestamp=2019-04-17T05:46:58.208Z}
[INFO ] 2019-04-17T05:46:58,248Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[B31E16F7288E66D4E3452CA22BD2D37D0CE02D10C34D093C20619091D939B6AB(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:58,300Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:46:58,302Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:35,252Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-499134ea-4e86-4379-95d0-906bbed1b815.jar {}
[INFO ] 2019-04-17T05:58:35,396Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-842a3899-bfdd-4f1b-a2e6-684b9ad780cc.jar {}
[INFO ] 2019-04-17T05:58:35,437Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-67ec5ff1-f8af-4a3e-a717-bcfc79497fed.jar {}
[INFO ] 2019-04-17T05:58:35,483Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-499134ea-4e86-4379-95d0-906bbed1b815.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-842a3899-bfdd-4f1b-a2e6-684b9ad780cc.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-67ec5ff1-f8af-4a3e-a717-bcfc79497fed.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T05:58:35,525Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:35,529Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:35,547Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-499134ea-4e86-4379-95d0-906bbed1b815.jar {}
[INFO ] 2019-04-17T05:58:35,580Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-842a3899-bfdd-4f1b-a2e6-684b9ad780cc.jar {}
[INFO ] 2019-04-17T05:58:35,600Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-67ec5ff1-f8af-4a3e-a717-bcfc79497fed.jar {}
[INFO ] 2019-04-17T05:58:35,734Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@33de9d85 {}
[INFO ] 2019-04-17T05:58:36,660Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:36,726Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:36,733Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:39,655Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:40,397Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:40,401Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:40,422Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:40,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:40,574Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:40,830Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:40,843Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:41,022Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:41,346Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 926876A6ACAB8FA2F3561F7453329014CFCAD4AF61EBF7963E33DDD85D89CFA2, not inserting the second time {}
[INFO ] 2019-04-17T05:58:41,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:41,498Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:41,501Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:41,502Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:41,510Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:41,514Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:41,523Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:41,527Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:41,574Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:41,605Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5426c89f {}
[INFO ] 2019-04-17T05:58:41,624Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:41,626Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:41,632Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:41,901Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:41,928Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:41,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:41,945Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:41,969Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:41,971Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,119Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:42,121Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:42,157Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 10BE2CCDF04764B492934D4D3D64496CE7A952883DA0309E443FE595E78117D1, not inserting the second time {}
[INFO ] 2019-04-17T05:58:42,169Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:42,175Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,202Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:42,205Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,211Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,236Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,239Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,255Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:42,260Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,262Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,268Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:42,271Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,278Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:42,283Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:42,344Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:42,378Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@30f1a181 {}
[INFO ] 2019-04-17T05:58:42,403Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:42,408Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:42,414Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:42,684Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:42,720Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:42,724Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,731Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,745Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,749Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,875Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:42,878Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:42,898Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 067151EE7285168362665A778B35C9BA166AB49A0FBF94D171EF9E1D8669B575, not inserting the second time {}
[INFO ] 2019-04-17T05:58:42,907Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:42,910Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480720401) {}
[INFO ] 2019-04-17T05:58:42,924Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,930Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,950Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,953Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,958Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:42,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480721933) {}
[INFO ] 2019-04-17T05:58:42,986Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:42,989Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:43,004Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:43,006Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:43,022Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:43,023Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:43,025Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:43,026Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:43,028Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480722723) {}
[INFO ] 2019-04-17T05:58:43,047Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:43,049Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:44,119Z [Mock network] flow.[938c75b3-a0b6-4769-8a4b-ff2cf09113bb].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6539645714282117127). {}
[INFO ] 2019-04-17T05:58:44,324Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6539645714282117127). {invocation_id=cf78d634-ee88-40bd-9b49-3c5bea005e86, invocation_timestamp=2019-04-17T05:58:44.311Z, session_id=cf78d634-ee88-40bd-9b49-3c5bea005e86, session_timestamp=2019-04-17T05:58:44.311Z}
[INFO ] 2019-04-17T05:58:44,792Z [Mock network] flow.[938c75b3-a0b6-4769-8a4b-ff2cf09113bb].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2802151400578466538). {}
[INFO ] 2019-04-17T05:58:44,848Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2802151400578466538). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=34ca704b-5544-465b-a62e-a4c86daafdc9, invocation_timestamp=2019-04-17T05:58:44.847Z, session_id=34ca704b-5544-465b-a62e-a4c86daafdc9, session_timestamp=2019-04-17T05:58:44.847Z}
[INFO ] 2019-04-17T05:58:45,194Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:45,204Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:45,219Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7144cd51 {}
[INFO ] 2019-04-17T05:58:45,247Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:45,249Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:45,253Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:45,582Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:45,603Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:45,605Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,620Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:45,639Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,641Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,753Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:45,756Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:45,765Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:45,778Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 842F8231462ABB44CDFBA2679BB1828D1783417291764596673B27D28BA7B55E, not inserting the second time {}
[INFO ] 2019-04-17T05:58:45,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,804Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:45,805Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,806Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,808Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:45,809Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:45,818Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:45,820Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:45,853Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:45,873Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63cd8f26 {}
[INFO ] 2019-04-17T05:58:45,900Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:45,903Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:45,904Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:46,064Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:46,073Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:46,075Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,081Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,085Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,087Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,195Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:46,197Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:46,214Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EB7E94175D6C0F90236F1758ACA0FD9F182AFC58B47081CD0B5FC4FB7F1DB215, not inserting the second time {}
[INFO ] 2019-04-17T05:58:46,221Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:46,234Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,257Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:46,259Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,261Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,272Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,273Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,277Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:46,283Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,285Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,287Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:46,289Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,296Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:46,302Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:46,322Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:46,331Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1d8ab0dc {}
[INFO ] 2019-04-17T05:58:46,341Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:46,343Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:46,344Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:46,451Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:46,460Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:46,461Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,468Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,472Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,473Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,592Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:46,594Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:46,611Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7ED62DDAC041085B2F4ABA79025CF343313E470E1A5501F0223CA716A2E3DB53, not inserting the second time {}
[INFO ] 2019-04-17T05:58:46,616Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:46,619Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,626Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480725605) {}
[INFO ] 2019-04-17T05:58:46,627Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,630Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,638Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,639Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,641Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,652Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480726075) {}
[INFO ] 2019-04-17T05:58:46,656Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,660Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:46,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,686Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:46,688Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,690Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:46,691Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480726461) {}
[INFO ] 2019-04-17T05:58:46,697Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:46,700Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T05:58:46,839Z [Mock network] flow.[c3af32bd-300b-477d-94fd-981d40146d62].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: 22D156715BE4E6A49955641649DD0B7A902604FCE6F17C0FA1311E7F74BCD49E
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T05:58:46,989Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:46,991Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:46,996Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6c249eb5 {}
[INFO ] 2019-04-17T05:58:47,008Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:47,010Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,011Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,127Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,134Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:47,135Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,139Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:47,151Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,153Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,265Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:47,267Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:47,272Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:47,284Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6EC39C30AF3ED574A85932FEA496371F6B57115701ACBD0AE9594ED323605A77, not inserting the second time {}
[INFO ] 2019-04-17T05:58:47,289Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,297Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:47,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,318Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,319Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:47,320Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,324Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:47,325Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:47,346Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:47,356Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@39fd1bfd {}
[INFO ] 2019-04-17T05:58:47,368Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:47,370Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,371Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,524Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,541Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:47,545Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,551Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:47,559Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,561Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,657Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:47,658Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:47,672Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F575D7C545204C39D1ACBD7AF11C3D8D7CB10A1B7B6E0CAEE13F226E39D2B257, not inserting the second time {}
[INFO ] 2019-04-17T05:58:47,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,682Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:47,692Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:47,693Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,695Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:47,705Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,707Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,711Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:47,712Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,713Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,714Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:47,715Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:47,718Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:47,719Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:47,752Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:47,762Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@20873a9 {}
[INFO ] 2019-04-17T05:58:47,797Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:47,801Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,802Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,944Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:47,971Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:47,972Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:47,977Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:47,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:47,986Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,091Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:48,092Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:48,107Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0AAF36B56EE10813199335FB636D4B262E74E90CA84A45DB25E72441D3052A19, not inserting the second time {}
[INFO ] 2019-04-17T05:58:48,113Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:48,115Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:48,123Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480727135) {}
[INFO ] 2019-04-17T05:58:48,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,127Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:48,136Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,137Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:48,139Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:48,146Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480727544) {}
[INFO ] 2019-04-17T05:58:48,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,150Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:48,167Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,173Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,189Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:48,195Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,196Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,201Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:48,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480727972) {}
[INFO ] 2019-04-17T05:58:48,208Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:48,210Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:48,292Z [Mock network] flow.[fa42ee39-2977-4808-9851-a812af4e189a].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3654183112008682433). {}
[INFO ] 2019-04-17T05:58:48,385Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3654183112008682433). {invocation_id=77344980-1168-43f3-8944-fe8b95f85715, invocation_timestamp=2019-04-17T05:58:48.384Z, session_id=77344980-1168-43f3-8944-fe8b95f85715, session_timestamp=2019-04-17T05:58:48.384Z}
[INFO ] 2019-04-17T05:58:48,722Z [Mock network] flow.[fa42ee39-2977-4808-9851-a812af4e189a].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5101502816970302705). {}
[INFO ] 2019-04-17T05:58:48,745Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5101502816970302705). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=2bd9d7a1-f958-4afd-8138-bab2476c068d, invocation_timestamp=2019-04-17T05:58:48.744Z, session_id=2bd9d7a1-f958-4afd-8138-bab2476c068d, session_timestamp=2019-04-17T05:58:48.744Z}
[INFO ] 2019-04-17T05:58:48,888Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:48,890Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:48,897Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4c9a434f {}
[INFO ] 2019-04-17T05:58:48,909Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:48,911Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:48,912Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,061Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:49,062Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,067Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,074Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,178Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:49,180Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:49,185Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:49,195Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5913A39BF642F8D21F6A67BD8BB7CA9D4BEB7ADACED30EF0F5AD1F50950852BA, not inserting the second time {}
[INFO ] 2019-04-17T05:58:49,201Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,205Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,208Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,209Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,211Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:49,213Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:49,226Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:49,236Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@53c4b36b {}
[INFO ] 2019-04-17T05:58:49,245Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:49,247Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,249Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,355Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,364Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:49,365Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,369Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,372Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,373Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,463Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:49,465Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:49,479Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 09EE366B321B9F9747983B07C70F21E2B7D417435E62A2B121861C50C9821B2C, not inserting the second time {}
[INFO ] 2019-04-17T05:58:49,486Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,489Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,503Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,507Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,517Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,519Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,524Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,525Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,527Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,528Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,530Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:49,532Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:49,544Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:49,550Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@62e099d7 {}
[INFO ] 2019-04-17T05:58:49,557Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:49,558Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,559Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,639Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:49,646Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:49,648Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,652Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,655Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,656Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,752Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:49,755Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:49,769Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 61C4E29F93212087B692510B062F5F211F4D3A0DADBF8CBB47F4CD06ACB72D6E, not inserting the second time {}
[INFO ] 2019-04-17T05:58:49,810Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,812Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,818Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480729062) {}
[INFO ] 2019-04-17T05:58:49,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,830Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,832Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,834Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,841Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480729365) {}
[INFO ] 2019-04-17T05:58:49,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,844Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:49,850Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,855Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,856Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,856Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,857Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:49,858Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480729648) {}
[INFO ] 2019-04-17T05:58:49,859Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:49,859Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:49,903Z [Mock network] flow.[b5dcf04d-4834-489a-b504-ed58004f581b].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5039929682342570698). {}
[INFO ] 2019-04-17T05:58:49,955Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-5039929682342570698). {invocation_id=c635ecc3-e82a-49f7-a215-1861ed7eac59, invocation_timestamp=2019-04-17T05:58:49.954Z, session_id=c635ecc3-e82a-49f7-a215-1861ed7eac59, session_timestamp=2019-04-17T05:58:49.954Z}
[INFO ] 2019-04-17T05:58:50,150Z [Mock network] flow.[b5dcf04d-4834-489a-b504-ed58004f581b].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6650522309748028404). {}
[INFO ] 2019-04-17T05:58:50,162Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6650522309748028404). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=cd23fe69-29eb-4279-b99f-458e498f93a9, invocation_timestamp=2019-04-17T05:58:50.161Z, session_id=cd23fe69-29eb-4279-b99f-458e498f93a9, session_timestamp=2019-04-17T05:58:50.161Z}
[INFO ] 2019-04-17T05:58:50,252Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:50,253Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:50,258Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6f42c61f {}
[INFO ] 2019-04-17T05:58:50,270Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:50,274Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,276Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,376Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,383Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:50,384Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,388Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:50,394Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,395Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,491Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:50,493Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:50,497Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:50,507Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BDDCB5C6729FBB4B3B9EE6DB4EDEE6E7B51B5B0C634BA1FD21AC3F2001F69BBD, not inserting the second time {}
[INFO ] 2019-04-17T05:58:50,512Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,518Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:50,519Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,520Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,521Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:50,522Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,536Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:50,538Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:50,551Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:50,558Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@737e8e66 {}
[INFO ] 2019-04-17T05:58:50,566Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:50,568Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,569Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,691Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,711Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:50,713Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,719Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:50,727Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,728Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,850Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:50,852Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:50,866Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C8B6611463DFCAA2A3D657086712C51B0F88A102687311BBBA759DB856B75F66, not inserting the second time {}
[INFO ] 2019-04-17T05:58:50,871Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,873Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:50,878Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:50,879Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,880Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:50,888Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,889Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,893Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:50,894Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,895Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:50,896Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:50,900Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:50,901Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:50,914Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:50,931Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@62b67ba {}
[INFO ] 2019-04-17T05:58:50,942Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:50,943Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:50,944Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:51,050Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:51,060Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:51,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,067Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:51,071Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,072Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,171Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:51,173Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:51,208Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 037BA36071784E108E01B6766367AA1AC0B4FEE3C4545D92D683816826A976E2, not inserting the second time {}
[INFO ] 2019-04-17T05:58:51,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:51,218Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:51,232Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480730384) {}
[INFO ] 2019-04-17T05:58:51,233Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,234Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:51,240Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,241Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:51,242Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:51,256Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480730713) {}
[INFO ] 2019-04-17T05:58:51,257Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,259Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:51,266Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,268Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,271Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:51,272Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,273Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,273Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:51,274Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480731061) {}
[INFO ] 2019-04-17T05:58:51,275Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:51,275Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:51,344Z [Mock network] flow.[23799a8c-c37c-451d-b6b8-03707e7b6132].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2812897562341383159). {}
[INFO ] 2019-04-17T05:58:51,482Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2812897562341383159). {invocation_id=566da66b-4b65-44fa-b829-dc2cd0e2bde7, invocation_timestamp=2019-04-17T05:58:51.481Z, session_id=566da66b-4b65-44fa-b829-dc2cd0e2bde7, session_timestamp=2019-04-17T05:58:51.481Z}
[INFO ] 2019-04-17T05:58:51,743Z [Mock network] flow.[23799a8c-c37c-451d-b6b8-03707e7b6132].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-965643023797053230). {}
[INFO ] 2019-04-17T05:58:51,768Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-965643023797053230). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=0dcea8fa-14ea-405f-86ef-45eb43f74ffd, invocation_timestamp=2019-04-17T05:58:51.767Z, session_id=0dcea8fa-14ea-405f-86ef-45eb43f74ffd, session_timestamp=2019-04-17T05:58:51.767Z}
[INFO ] 2019-04-17T05:58:51,895Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:51,896Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:51,902Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7728bed {}
[INFO ] 2019-04-17T05:58:51,920Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:51,922Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:51,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,026Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,034Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:52,037Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,041Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,052Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,054Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,157Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:52,159Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:52,162Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:52,172Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CC8AD282AC49FBC4956AC09B93F3A2A1ED7F8C47189C3D7D717BBF200E6F1DDD, not inserting the second time {}
[INFO ] 2019-04-17T05:58:52,177Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,181Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,183Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,184Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,185Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,189Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:52,190Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:52,208Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:52,217Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1da074ef {}
[INFO ] 2019-04-17T05:58:52,232Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:52,237Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,238Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,332Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,343Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:52,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,370Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,374Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,376Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,509Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:52,511Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:52,524Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 95C6B4CF98127A19B22A6EC77388B6957697077DD0AB02E68E79EC7D9C6538F5, not inserting the second time {}
[INFO ] 2019-04-17T05:58:52,528Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,538Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,545Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,546Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,548Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,554Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,555Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,558Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,559Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,560Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,561Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,562Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,565Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:52,566Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:52,591Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:52,604Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@298ff16 {}
[INFO ] 2019-04-17T05:58:52,611Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:52,612Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,613Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,718Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:52,736Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:52,737Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,741Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,744Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,746Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,844Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:52,847Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:52,861Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CF2EA294117E8F45E35598661CFC53638432372F02535E498767ADB5D0A9D0ED, not inserting the second time {}
[INFO ] 2019-04-17T05:58:52,868Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,871Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,877Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480732037) {}
[INFO ] 2019-04-17T05:58:52,880Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,883Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,889Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,900Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,902Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,908Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480732344) {}
[INFO ] 2019-04-17T05:58:52,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,925Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:52,945Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,946Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,950Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,954Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,955Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:52,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480732737) {}
[INFO ] 2019-04-17T05:58:52,957Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:52,958Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:53,021Z [Mock network] flow.[62045fe1-94c7-4620-a470-993af88c261e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8911723637647178024). {}
[INFO ] 2019-04-17T05:58:53,056Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8911723637647178024). {invocation_id=0a2caeb5-4789-4518-a336-1e22dd019db2, invocation_timestamp=2019-04-17T05:58:53.056Z, session_id=0a2caeb5-4789-4518-a336-1e22dd019db2, session_timestamp=2019-04-17T05:58:53.056Z}
[INFO ] 2019-04-17T05:58:53,199Z [Mock network] flow.[62045fe1-94c7-4620-a470-993af88c261e].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7058146782092927370). {}
[INFO ] 2019-04-17T05:58:53,211Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7058146782092927370). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=18c2dd41-c2d5-43a3-9514-666f82c86feb, invocation_timestamp=2019-04-17T05:58:53.210Z, session_id=18c2dd41-c2d5-43a3-9514-666f82c86feb, session_timestamp=2019-04-17T05:58:53.210Z}
[INFO ] 2019-04-17T05:58:53,250Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:53,300Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:53,364Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:53,365Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:53,369Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@64d23a83 {}
[INFO ] 2019-04-17T05:58:53,395Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:53,396Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,397Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,512Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:53,513Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,518Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:53,524Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,525Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,622Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:53,623Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T05:58:53,627Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T05:58:53,636Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DFB0E9CC2981450C8AA2A7C163CB4226AD22B365A622AC09CA1977F4CD78755C, not inserting the second time {}
[INFO ] 2019-04-17T05:58:53,641Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,644Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:53,645Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,646Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,647Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:53,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,650Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:53,651Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:53,668Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:53,674Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@29345a91 {}
[INFO ] 2019-04-17T05:58:53,681Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:53,682Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,683Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,777Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:53,787Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:53,789Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,793Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:53,796Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,797Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,895Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:53,896Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:53,920Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8098B4E4D998C62140FA98DD3DEACBCC53987229196861AF6EF3BC7BFEE1D09C, not inserting the second time {}
[INFO ] 2019-04-17T05:58:53,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,931Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:53,939Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:53,940Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,942Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:53,954Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,956Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,962Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:53,963Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,964Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:53,967Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:53,994Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:54,001Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T05:58:54,004Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T05:58:54,026Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T05:58:54,041Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@39093a4a {}
[INFO ] 2019-04-17T05:58:54,053Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T05:58:54,054Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:54,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:54,168Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T05:58:54,175Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T05:58:54,178Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,183Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:54,186Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,187Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,274Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T05:58:54,275Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T05:58:54,287Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8A3174A02D278E79C919F588C7779DB137F3D7BACB778A3EFDABA467A298B46A, not inserting the second time {}
[INFO ] 2019-04-17T05:58:54,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:54,292Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:54,299Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480733513) {}
[INFO ] 2019-04-17T05:58:54,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,302Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:54,307Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,308Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:54,309Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:54,316Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480733789) {}
[INFO ] 2019-04-17T05:58:54,317Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,318Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T05:58:54,324Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,327Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:54,328Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,329Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,329Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T05:58:54,330Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480734178) {}
[INFO ] 2019-04-17T05:58:54,331Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:54,331Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:54,336Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:54,338Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T05:58:54,402Z [Mock network] flow.[75c1884b-e5ca-4ebf-bd58-e8614f10e136].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2404744523096789449). {}
[INFO ] 2019-04-17T05:58:54,447Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2404744523096789449). {invocation_id=7b30681a-e340-4d64-b631-f60f6b3279c2, invocation_timestamp=2019-04-17T05:58:54.446Z, session_id=7b30681a-e340-4d64-b631-f60f6b3279c2, session_timestamp=2019-04-17T05:58:54.446Z}
[INFO ] 2019-04-17T05:58:54,548Z [Mock network] flow.[75c1884b-e5ca-4ebf-bd58-e8614f10e136].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8893084613757804302). {}
[INFO ] 2019-04-17T05:58:54,566Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8893084613757804302). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=51c6f03e-84de-4bd2-a576-66743b524be0, invocation_timestamp=2019-04-17T05:58:54.566Z, session_id=51c6f03e-84de-4bd2-a576-66743b524be0, session_timestamp=2019-04-17T05:58:54.566Z}
[INFO ] 2019-04-17T05:58:54,614Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:54,622Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:54,649Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: LinearStateQueryCriteria(participants=null, uuid=[afcab908-2f11-470e-a4f9-cc993895ed35], externalId=[], status=UNCONSUMED, contractStateTypes=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:54,743Z [Mock network] flow.[aca7f06f-f3bf-4d45-8524-24f2c7fa3d5f].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5091831476822134986). {}
[INFO ] 2019-04-17T05:58:54,780Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5091831476822134986). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=7603a413-c12d-4293-9f00-a2056154b3d6, invocation_timestamp=2019-04-17T05:58:54.773Z, session_id=7603a413-c12d-4293-9f00-a2056154b3d6, session_timestamp=2019-04-17T05:58:54.773Z}
[INFO ] 2019-04-17T05:58:54,955Z [Mock network] flow.[aca7f06f-f3bf-4d45-8524-24f2c7fa3d5f].initiateSession - Initiating flow session with party O=Notary Service, L=Zurich, C=CH. Session id for tracing purposes is SessionId(toLong=2336058841069307421). {}
[INFO ] 2019-04-17T05:58:54,981Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2336058841069307421). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=3d9a22ae-606d-4897-8041-75ffe924d507, invocation_timestamp=2019-04-17T05:58:54.979Z, session_id=3d9a22ae-606d-4897-8041-75ffe924d507, session_timestamp=2019-04-17T05:58:54.979Z}
[INFO ] 2019-04-17T05:58:54,994Z [Mock network] flow.[a39a2437-bdfd-40db-b0dc-bed00dfa03d0].call - Requesting 1 dependency(s) for verification from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:58:55,114Z [Mock network] flow.[a39a2437-bdfd-40db-b0dc-bed00dfa03d0].call - Fetched 1 elements from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T05:58:55,215Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[89B3ABD2194E8E3F4A9A8D90F86701C52DBC197F68235A768E9AB843093DFE55(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:55,230Z [Mock network] flow.[aca7f06f-f3bf-4d45-8524-24f2c7fa3d5f].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4814565822285511930). {}
[INFO ] 2019-04-17T05:58:55,249Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4814565822285511930). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=bafcbee1-d19b-4504-a614-50d479ee2619, invocation_timestamp=2019-04-17T05:58:55.248Z, session_id=bafcbee1-d19b-4504-a614-50d479ee2619, session_timestamp=2019-04-17T05:58:55.248Z}
[INFO ] 2019-04-17T05:58:55,271Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[89B3ABD2194E8E3F4A9A8D90F86701C52DBC197F68235A768E9AB843093DFE55(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T05:58:55,309Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=CONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:00:55,712Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-6634ff04-ecce-4209-a9e2-8fa902d73a1c.jar {}
[INFO ] 2019-04-17T06:00:55,852Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-7393fd28-a350-45fc-b48c-7ba7488ef18d.jar {}
[INFO ] 2019-04-17T06:00:55,884Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-c1253e7a-5be1-4092-a703-8bf109e7802f.jar {}
[INFO ] 2019-04-17T06:00:55,922Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6634ff04-ecce-4209-a9e2-8fa902d73a1c.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7393fd28-a350-45fc-b48c-7ba7488ef18d.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-c1253e7a-5be1-4092-a703-8bf109e7802f.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T06:00:55,965Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:00:55,969Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:00:55,986Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-6634ff04-ecce-4209-a9e2-8fa902d73a1c.jar {}
[INFO ] 2019-04-17T06:00:56,019Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-7393fd28-a350-45fc-b48c-7ba7488ef18d.jar {}
[INFO ] 2019-04-17T06:00:56,043Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-c1253e7a-5be1-4092-a703-8bf109e7802f.jar {}
[INFO ] 2019-04-17T06:00:56,181Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4cc4f6bd {}
[INFO ] 2019-04-17T06:00:57,144Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:00:57,212Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:00:57,218Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:00,507Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:01,377Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:01,388Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:01,477Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:01,692Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:01,696Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:02,512Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:02,562Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:02,716Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:03,024Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F5393CAD0B0DAA16E86373F15497FAC4F80815602AD659550908E79D92CA0969, not inserting the second time {}
[INFO ] 2019-04-17T06:01:03,170Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,203Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:03,205Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,209Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,216Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:03,218Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,228Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:03,230Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:03,271Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:03,307Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e765313 {}
[INFO ] 2019-04-17T06:01:03,329Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:03,332Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:03,335Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:03,622Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:03,642Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:03,646Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,658Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:03,679Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,693Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,854Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:03,859Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:03,902Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5710C6543957DEE76275B3C82E433BB5BF18E25941B38E785C93FDC343FE0453, not inserting the second time {}
[INFO ] 2019-04-17T06:01:03,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,927Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:03,941Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:03,943Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,945Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:03,972Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,974Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,983Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:03,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,989Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:03,991Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:03,994Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:03,995Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:04,014Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:04,033Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5e4168dd {}
[INFO ] 2019-04-17T06:01:04,048Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:04,050Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:04,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:04,257Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:04,274Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:04,276Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,282Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:04,290Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,293Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,442Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:04,451Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:04,491Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 436AAAD13F0976CD6FA84C2173C0638B3072DC8AFCFC97506757FFD4AADDB583, not inserting the second time {}
[INFO ] 2019-04-17T06:01:04,504Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:04,507Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:04,526Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480861388) {}
[INFO ] 2019-04-17T06:01:04,528Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,533Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:04,570Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:04,579Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:04,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480863646) {}
[INFO ] 2019-04-17T06:01:04,609Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:04,633Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,636Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,644Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:04,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,648Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,649Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:04,651Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480864276) {}
[INFO ] 2019-04-17T06:01:04,674Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:04,676Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:05,717Z [Mock network] flow.[bedbba41-12ca-4d22-8344-bac7baf0efc2].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3721151109877659298). {}
[INFO ] 2019-04-17T06:01:05,955Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3721151109877659298). {invocation_id=4f7627f6-7868-4ea4-8809-8076cd7239cd, invocation_timestamp=2019-04-17T06:01:05.942Z, session_id=4f7627f6-7868-4ea4-8809-8076cd7239cd, session_timestamp=2019-04-17T06:01:05.942Z}
[INFO ] 2019-04-17T06:01:06,499Z [Mock network] flow.[bedbba41-12ca-4d22-8344-bac7baf0efc2].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5431906204687079160). {}
[INFO ] 2019-04-17T06:01:06,571Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=5431906204687079160). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=c487f299-5d22-4062-a924-8fb16f007d27, invocation_timestamp=2019-04-17T06:01:06.569Z, session_id=c487f299-5d22-4062-a924-8fb16f007d27, session_timestamp=2019-04-17T06:01:06.569Z}
[INFO ] 2019-04-17T06:01:06,948Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:06,951Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:06,962Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@26b37ec {}
[INFO ] 2019-04-17T06:01:06,986Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:06,989Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:06,992Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:07,263Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:07,281Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:07,289Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,302Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:07,325Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,328Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,445Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:07,447Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:07,458Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:07,474Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B98ABE722DC5D6921BB668CB4B7501E12EFA3E2BB9CA5955B67098A65C7E53EA, not inserting the second time {}
[INFO ] 2019-04-17T06:01:07,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,498Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:07,500Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,504Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,506Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:07,508Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,514Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:07,517Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:07,558Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:07,573Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7a82be85 {}
[INFO ] 2019-04-17T06:01:07,605Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:07,611Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:07,613Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:07,740Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:07,751Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:07,754Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,759Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:07,763Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,764Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,858Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:07,860Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:07,886Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 54A0AAC3C71BDC95B626D2250CEAA65DE3E7DB0397CFF857383E429422A1717B, not inserting the second time {}
[INFO ] 2019-04-17T06:01:07,893Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,898Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:07,912Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:07,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,920Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:07,938Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,939Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,944Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:07,949Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,951Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,952Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:07,954Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:07,957Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:07,958Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:07,980Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:07,998Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@75564919 {}
[INFO ] 2019-04-17T06:01:08,019Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:08,021Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,024Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,165Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:08,167Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,176Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,180Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,182Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,306Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:08,308Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:08,322Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C667A96A58720256A61E316E33201E134CF742F01E5604A02024A75936A974A7, not inserting the second time {}
[INFO ] 2019-04-17T06:01:08,328Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:08,339Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,354Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480867289) {}
[INFO ] 2019-04-17T06:01:08,355Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,359Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,369Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,370Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:08,374Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,388Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480867754) {}
[INFO ] 2019-04-17T06:01:08,391Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,395Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,414Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,416Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,429Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:08,433Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,435Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,437Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:08,438Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480868167) {}
[INFO ] 2019-04-17T06:01:08,439Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:08,441Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T06:01:08,558Z [Mock network] flow.[702a250e-5d16-4f57-a2bc-eceebc04e77d].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: BC7758F7BEAC315346B51046FA2AFEC88B0390F5304B7BBE55E61BBF8A4B2FF5
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T06:01:08,696Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:08,697Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:08,709Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25824720 {}
[INFO ] 2019-04-17T06:01:08,720Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:08,722Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,724Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,844Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:08,852Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:08,854Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:08,861Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:08,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:08,877Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:08,978Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:08,980Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:08,986Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:08,997Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 707C39191D2D00A43058A404756D3A0D1420E4BE4C0FB177B350CA340E93E926, not inserting the second time {}
[INFO ] 2019-04-17T06:01:09,003Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,012Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,039Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,054Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,056Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,062Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:09,066Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:09,087Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:09,097Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@56482084 {}
[INFO ] 2019-04-17T06:01:09,126Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:09,128Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,129Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,303Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,315Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:09,318Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,326Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,332Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,446Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:09,448Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:09,463Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 548E5111D5AADEA9C65D2FF47B03C3E8BDB26164D6B0CB0F2A6630E0C6E05DEF, not inserting the second time {}
[INFO ] 2019-04-17T06:01:09,471Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,479Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,492Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,493Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,495Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,503Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,505Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,509Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,510Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,511Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,512Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,513Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,517Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:09,520Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:09,544Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:09,560Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6eac0029 {}
[INFO ] 2019-04-17T06:01:09,590Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:09,591Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,593Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,716Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:09,732Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:09,740Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,745Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,757Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,759Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,862Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:09,871Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:09,898Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A3989F0B8F0D7578E0159E40063708AB5F5A6C3495D2482EF3DC764B50C88F1C, not inserting the second time {}
[INFO ] 2019-04-17T06:01:09,903Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,906Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480868854) {}
[INFO ] 2019-04-17T06:01:09,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,917Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,930Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,932Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,934Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480869318) {}
[INFO ] 2019-04-17T06:01:09,945Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,954Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:09,973Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,975Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,982Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,989Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:09,990Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480869740) {}
[INFO ] 2019-04-17T06:01:09,991Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:09,992Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:10,080Z [Mock network] flow.[32453084-ba08-4eb2-b001-24b17175d6ca].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=390823334584356493). {}
[INFO ] 2019-04-17T06:01:10,232Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=390823334584356493). {invocation_id=a0129143-cb0c-4468-81dd-2eb21e15e2b5, invocation_timestamp=2019-04-17T06:01:10.229Z, session_id=a0129143-cb0c-4468-81dd-2eb21e15e2b5, session_timestamp=2019-04-17T06:01:10.229Z}
[INFO ] 2019-04-17T06:01:10,496Z [Mock network] flow.[32453084-ba08-4eb2-b001-24b17175d6ca].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3838476723454730075). {}
[INFO ] 2019-04-17T06:01:10,510Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3838476723454730075). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=e88fdbc8-198d-470f-baf7-346e04b7da08, invocation_timestamp=2019-04-17T06:01:10.509Z, session_id=e88fdbc8-198d-470f-baf7-346e04b7da08, session_timestamp=2019-04-17T06:01:10.509Z}
[INFO ] 2019-04-17T06:01:10,624Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:10,625Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:10,631Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63f70fd7 {}
[INFO ] 2019-04-17T06:01:10,646Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:10,648Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:10,649Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:10,803Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:10,812Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:10,813Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,817Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:10,825Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,827Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,924Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:10,926Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:10,931Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:10,940Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C67B86E67619492BA0284C0CB622CD39860E0A1BEB1763E61B5A23B8528591C9, not inserting the second time {}
[INFO ] 2019-04-17T06:01:10,945Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,949Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:10,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,952Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,954Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:10,955Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:10,960Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:10,961Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:10,974Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:10,981Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@569d8002 {}
[INFO ] 2019-04-17T06:01:10,988Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:10,989Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:10,990Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:11,075Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:11,085Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:11,089Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,094Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:11,097Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,098Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,300Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:11,307Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:11,366Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 311202B173AD036D23BD59C59337EB79423229A5065443152C533C974D9CCE23, not inserting the second time {}
[INFO ] 2019-04-17T06:01:11,395Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:11,453Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:11,549Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:11,551Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,554Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:11,586Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,587Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,591Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:11,592Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,592Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,593Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:11,594Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:11,597Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:11,598Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:11,623Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:11,643Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@51cea39e {}
[INFO ] 2019-04-17T06:01:11,659Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:11,660Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:11,661Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:11,877Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:11,883Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:11,884Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:11,888Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:11,891Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:11,893Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:11,983Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:11,985Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:11,998Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0BCEED99B05705A0A16E1F2BEF5989894894815B3284A90BA587A04BEB873D6F, not inserting the second time {}
[INFO ] 2019-04-17T06:01:12,002Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:12,006Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:12,012Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480870813) {}
[INFO ] 2019-04-17T06:01:12,014Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,017Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:12,026Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,027Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:12,031Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:12,041Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480871089) {}
[INFO ] 2019-04-17T06:01:12,042Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,043Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:12,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,050Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,054Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:12,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,056Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,057Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:12,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480871884) {}
[INFO ] 2019-04-17T06:01:12,058Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:12,059Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:12,157Z [Mock network] flow.[e5045085-65b6-4be7-87d1-af93781054aa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2909379464845069066). {}
[INFO ] 2019-04-17T06:01:12,198Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-2909379464845069066). {invocation_id=396b716f-370a-4e4f-a593-f088d8243a8e, invocation_timestamp=2019-04-17T06:01:12.197Z, session_id=396b716f-370a-4e4f-a593-f088d8243a8e, session_timestamp=2019-04-17T06:01:12.197Z}
[INFO ] 2019-04-17T06:01:12,363Z [Mock network] flow.[e5045085-65b6-4be7-87d1-af93781054aa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7217177800092626712). {}
[INFO ] 2019-04-17T06:01:12,374Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7217177800092626712). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=ad015b43-c295-4672-b662-babf3b92dd09, invocation_timestamp=2019-04-17T06:01:12.373Z, session_id=ad015b43-c295-4672-b662-babf3b92dd09, session_timestamp=2019-04-17T06:01:12.373Z}
[INFO ] 2019-04-17T06:01:12,463Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:12,464Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:12,468Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@c56c25b {}
[INFO ] 2019-04-17T06:01:12,488Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:12,490Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:12,491Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:12,608Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:12,617Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:12,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,630Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:12,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,648Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,900Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:12,904Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:12,912Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:12,953Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 288614550460DA3392327A41C8877F51582FF5C6E514A41850055A276A5E12E7, not inserting the second time {}
[INFO ] 2019-04-17T06:01:12,964Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,968Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:12,972Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,973Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,975Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:12,976Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:12,982Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:12,983Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:12,995Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:13,003Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5881d8da {}
[INFO ] 2019-04-17T06:01:13,015Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:13,016Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,018Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,118Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,127Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:13,128Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,132Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,137Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,138Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,239Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:13,242Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:13,255Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A94489BDA4A287DCF6299B4C9FFC250086E923AF15CF4AC4BD0EB7D56555FC06, not inserting the second time {}
[INFO ] 2019-04-17T06:01:13,260Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:13,262Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:13,269Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,271Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,278Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,282Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:13,284Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,285Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:13,286Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,289Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:13,290Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:13,303Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:13,311Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@bddac59 {}
[INFO ] 2019-04-17T06:01:13,317Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:13,319Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,330Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,490Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:13,497Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:13,499Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,508Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,511Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,513Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,610Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:13,612Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:13,626Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 465ECC83F116F6916823DB4EAD6C95BEA3BF9DE3286131DC76A444146DEE794F, not inserting the second time {}
[INFO ] 2019-04-17T06:01:13,632Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:13,633Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,641Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480872623) {}
[INFO ] 2019-04-17T06:01:13,642Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,643Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,655Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,656Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,658Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,666Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480873128) {}
[INFO ] 2019-04-17T06:01:13,667Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,670Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:13,678Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,682Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:13,683Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,684Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,685Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:13,687Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480873499) {}
[INFO ] 2019-04-17T06:01:13,688Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:13,688Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:13,763Z [Mock network] flow.[148a2161-0809-42c7-91e9-ed160d6d9ca5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6792448073271529498). {}
[INFO ] 2019-04-17T06:01:13,827Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=6792448073271529498). {invocation_id=1f44286d-763c-4e6a-87af-479f25b0595f, invocation_timestamp=2019-04-17T06:01:13.826Z, session_id=1f44286d-763c-4e6a-87af-479f25b0595f, session_timestamp=2019-04-17T06:01:13.826Z}
[INFO ] 2019-04-17T06:01:14,070Z [Mock network] flow.[148a2161-0809-42c7-91e9-ed160d6d9ca5].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1988078798830194152). {}
[INFO ] 2019-04-17T06:01:14,091Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1988078798830194152). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=5ad14db7-467a-4aaf-8250-7ef22c32dd3d, invocation_timestamp=2019-04-17T06:01:14.090Z, session_id=5ad14db7-467a-4aaf-8250-7ef22c32dd3d, session_timestamp=2019-04-17T06:01:14.090Z}
[INFO ] 2019-04-17T06:01:14,177Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:14,178Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:14,183Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@46e5c331 {}
[INFO ] 2019-04-17T06:01:14,206Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:14,207Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,208Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,471Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,480Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:14,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,488Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:14,497Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,499Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,615Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:14,617Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:14,623Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:14,632Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 185A67BF908AB29359DF36F42FBDF6749E6F170C37D1334CFC0EBBB328CA9B4D, not inserting the second time {}
[INFO ] 2019-04-17T06:01:14,638Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,642Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:14,643Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,643Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,644Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:14,645Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:14,647Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:14,648Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:14,659Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:14,668Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@486ec456 {}
[INFO ] 2019-04-17T06:01:14,677Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:14,680Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,681Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,762Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:14,789Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:14,790Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:14,809Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:14,813Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:14,815Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:14,984Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:14,986Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:15,008Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E6B34E63035259A8256795EB8496DB44AD395BC573E271D5AA89318C6BF12BD4, not inserting the second time {}
[INFO ] 2019-04-17T06:01:15,029Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:15,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,090Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:15,092Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,097Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,105Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,109Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:15,110Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,112Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:15,112Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,115Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:15,116Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:15,142Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:15,150Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7d9d4205 {}
[INFO ] 2019-04-17T06:01:15,157Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:15,160Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:15,161Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:15,351Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:15,372Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:15,373Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,378Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,382Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,383Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,501Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:15,507Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:15,522Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F01E618E966B980646CED9D1661E53362F1084DAF7982545321810475D150448, not inserting the second time {}
[INFO ] 2019-04-17T06:01:15,526Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:15,528Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,536Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480874482) {}
[INFO ] 2019-04-17T06:01:15,537Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,538Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,554Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,559Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,564Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480874790) {}
[INFO ] 2019-04-17T06:01:15,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,571Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:15,588Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,597Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:15,598Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,599Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,605Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:15,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480875373) {}
[INFO ] 2019-04-17T06:01:15,608Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:15,610Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:15,701Z [Mock network] flow.[dd1752e5-1453-4013-9d94-8e46da6a171c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3582361408803490921). {}
[INFO ] 2019-04-17T06:01:15,789Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3582361408803490921). {invocation_id=61f15cf2-eb97-4ed1-b886-4ba0bf3c6205, invocation_timestamp=2019-04-17T06:01:15.787Z, session_id=61f15cf2-eb97-4ed1-b886-4ba0bf3c6205, session_timestamp=2019-04-17T06:01:15.787Z}
[INFO ] 2019-04-17T06:01:15,950Z [Mock network] flow.[dd1752e5-1453-4013-9d94-8e46da6a171c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=305507325395168453). {}
[INFO ] 2019-04-17T06:01:15,960Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=305507325395168453). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=f3b7bc8c-e65c-427e-8000-2b8d35f2c9b2, invocation_timestamp=2019-04-17T06:01:15.959Z, session_id=f3b7bc8c-e65c-427e-8000-2b8d35f2c9b2, session_timestamp=2019-04-17T06:01:15.959Z}
[INFO ] 2019-04-17T06:01:16,009Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:16,063Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:16,129Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:16,131Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:16,135Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@349bc516 {}
[INFO ] 2019-04-17T06:01:16,149Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:16,151Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,154Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,266Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,280Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:16,281Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,287Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:16,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,500Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:16,507Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:01:16,517Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:01:16,550Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F1EC2D1A4560F1E979BF8E839AB39751C3A91A99AF713D8C8FC54D7AD2B8B090, not inserting the second time {}
[INFO ] 2019-04-17T06:01:16,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,562Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:16,563Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,563Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,564Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:16,565Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:16,569Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:16,570Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:16,588Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:16,594Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@65b7c392 {}
[INFO ] 2019-04-17T06:01:16,604Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:16,606Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,607Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,711Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:16,723Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:16,725Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:16,731Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:16,734Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:16,736Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,145Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:17,148Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:17,161Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0E653ED7E98E25D052278B7C6365EBFA5C6C4E1C0D1C4BE2E78C095F60D61745, not inserting the second time {}
[INFO ] 2019-04-17T06:01:17,172Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:17,174Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,179Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:17,180Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,182Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,192Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,194Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,199Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:17,201Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,204Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,205Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:17,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,212Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:01:17,213Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:01:17,266Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:01:17,326Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4f900cf9 {}
[INFO ] 2019-04-17T06:01:17,342Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:01:17,344Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:17,345Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:17,490Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:01:17,501Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:01:17,502Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,507Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,510Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,511Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,603Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:01:17,605Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:01:17,616Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 934450D992277606F8CC65DC4EA829D3E1B232AE198DC228C1D311FAC10EC05F, not inserting the second time {}
[INFO ] 2019-04-17T06:01:17,622Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:17,624Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,630Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480876281) {}
[INFO ] 2019-04-17T06:01:17,631Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,632Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,640Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,641Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,643Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480876725) {}
[INFO ] 2019-04-17T06:01:17,649Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,651Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:01:17,657Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,658Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,662Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:17,663Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,664Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,664Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:01:17,665Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480877502) {}
[INFO ] 2019-04-17T06:01:17,666Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:17,666Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:17,672Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:17,673Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:01:17,745Z [Mock network] flow.[5839686b-2268-49ca-931d-467f13e0f782].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7999716367232784732). {}
[INFO ] 2019-04-17T06:01:17,787Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7999716367232784732). {invocation_id=6b32eeb7-2450-44a9-8cd0-e0eb0fd9b27c, invocation_timestamp=2019-04-17T06:01:17.786Z, session_id=6b32eeb7-2450-44a9-8cd0-e0eb0fd9b27c, session_timestamp=2019-04-17T06:01:17.786Z}
[INFO ] 2019-04-17T06:01:17,909Z [Mock network] flow.[5839686b-2268-49ca-931d-467f13e0f782].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1636757963266256545). {}
[INFO ] 2019-04-17T06:01:17,932Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1636757963266256545). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=8870b63c-7c02-4497-af28-82ecac1bea4f, invocation_timestamp=2019-04-17T06:01:17.932Z, session_id=8870b63c-7c02-4497-af28-82ecac1bea4f, session_timestamp=2019-04-17T06:01:17.932Z}
[INFO ] 2019-04-17T06:01:18,020Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,026Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,082Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: LinearStateQueryCriteria(participants=null, uuid=[6e674cce-84f7-480b-b8f6-a62830526b21], externalId=[], status=UNCONSUMED, contractStateTypes=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,194Z [Mock network] flow.[7ea5880c-b0af-4baf-b239-20da3086ea9c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6917316311056139106). {}
[INFO ] 2019-04-17T06:01:18,233Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6917316311056139106). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=d2c4e1f2-dc47-45fa-a158-0f7068c779af, invocation_timestamp=2019-04-17T06:01:18.232Z, session_id=d2c4e1f2-dc47-45fa-a158-0f7068c779af, session_timestamp=2019-04-17T06:01:18.232Z}
[INFO ] 2019-04-17T06:01:18,366Z [Mock network] flow.[7ea5880c-b0af-4baf-b239-20da3086ea9c].initiateSession - Initiating flow session with party O=Notary Service, L=Zurich, C=CH. Session id for tracing purposes is SessionId(toLong=-9213097093279132104). {}
[INFO ] 2019-04-17T06:01:18,395Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-9213097093279132104). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=80794626-787c-4c12-b825-ac06da27b000, invocation_timestamp=2019-04-17T06:01:18.393Z, session_id=80794626-787c-4c12-b825-ac06da27b000, session_timestamp=2019-04-17T06:01:18.393Z}
[INFO ] 2019-04-17T06:01:18,438Z [Mock network] flow.[1353fe31-e02a-4543-a792-a2d746d3a217].call - Requesting 1 dependency(s) for verification from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T06:01:18,533Z [Mock network] flow.[1353fe31-e02a-4543-a792-a2d746d3a217].call - Fetched 1 elements from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T06:01:18,615Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[411D03FBE62F57A0CA99207115D93B60B1814C5A58CB197B5A1F37DCB1ADF73A(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,631Z [Mock network] flow.[7ea5880c-b0af-4baf-b239-20da3086ea9c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7378933880584145499). {}
[INFO ] 2019-04-17T06:01:18,645Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7378933880584145499). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=0b14122d-5694-4c97-9680-60c379a314bd, invocation_timestamp=2019-04-17T06:01:18.644Z, session_id=0b14122d-5694-4c97-9680-60c379a314bd, session_timestamp=2019-04-17T06:01:18.644Z}
[INFO ] 2019-04-17T06:01:18,664Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[411D03FBE62F57A0CA99207115D93B60B1814C5A58CB197B5A1F37DCB1ADF73A(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,696Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=CONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,700Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,701Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=CONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:01:18,705Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:02:46,286Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/test/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-681b382d-e069-4fed-a7dd-6b086050cc3d.jar {}
[INFO ] 2019-04-17T06:02:46,431Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.contract in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/contract: build\tmp\generated-test-cordapps\com.example.contract-2c267d68-7d7b-447b-84bf-6fd298bd757c.jar {}
[INFO ] 2019-04-17T06:02:46,480Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.example.schema in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/classes/java/main/com/example/schema: build\tmp\generated-test-cordapps\com.example.schema-13533ca1-6cff-488a-ab0f-aa434996453f.jar {}
[INFO ] 2019-04-17T06:02:46,532Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-681b382d-e069-4fed-a7dd-6b086050cc3d.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2c267d68-7d7b-447b-84bf-6fd298bd757c.jar, rootPackageName=null), RestrictedURL(url=file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-13533ca1-6cff-488a-ab0f-aa434996453f.jar, rootPackageName=null) {}
[INFO ] 2019-04-17T06:02:46,574Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:46,583Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:46,606Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-681b382d-e069-4fed-a7dd-6b086050cc3d.jar {}
[INFO ] 2019-04-17T06:02:46,639Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.contract-2c267d68-7d7b-447b-84bf-6fd298bd757c.jar {}
[INFO ] 2019-04-17T06:02:46,663Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/F:/Development/workspace/samples/cordapp-example/kotlin-source/build/tmp/generated-test-cordapps/com.example.schema-13533ca1-6cff-488a-ab0f-aa434996453f.jar {}
[INFO ] 2019-04-17T06:02:46,807Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4cc4f6bd {}
[INFO ] 2019-04-17T06:02:47,797Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:47,863Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:47,869Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:50,841Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:51,606Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:51,609Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:51,631Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:51,802Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:51,806Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:52,073Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:52,085Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:02:52,277Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:02:52,560Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A4A6CB7771EBE19837DD9484592CD662EC591E08E7B41568D7C4BD68706A89EF, not inserting the second time {}
[INFO ] 2019-04-17T06:02:52,694Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:52,748Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:52,752Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:52,754Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:52,762Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:52,765Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:52,773Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:52,776Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:52,832Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:52,860Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@296ac298 {}
[INFO ] 2019-04-17T06:02:52,889Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:52,896Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:52,898Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:53,139Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:53,160Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:53,163Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,180Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,209Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,211Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,367Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:53,369Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:53,397Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 23D663876C23689B60C8382539DBB2DBF217E5FD494EA3F8C6E6ED0BEB63C301, not inserting the second time {}
[INFO ] 2019-04-17T06:02:53,409Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:53,414Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,431Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:53,434Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,438Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,452Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,460Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,469Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:53,472Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,474Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,477Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:53,478Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,484Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:53,486Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:53,516Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:53,542Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@53bf7b33 {}
[INFO ] 2019-04-17T06:02:53,556Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:53,558Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:53,560Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:53,744Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:53,763Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:53,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:53,771Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,782Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:53,783Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:53,892Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:53,895Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:53,912Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FF131D2BB2B896429941BD6AF4EA15FC0F7D81FF33C3FC605E7F7FDF0A9BBA17, not inserting the second time {}
[INFO ] 2019-04-17T06:02:53,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:53,923Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,934Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480971609) {}
[INFO ] 2019-04-17T06:02:53,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:53,941Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:53,966Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:53,970Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:53,976Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:54,008Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480973163) {}
[INFO ] 2019-04-17T06:02:54,013Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,017Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:54,032Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,035Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,054Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:54,056Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,059Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:54,065Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480973765) {}
[INFO ] 2019-04-17T06:02:54,088Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:02:54,090Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:02:55,131Z [Mock network] flow.[ff58233a-930d-425e-b3ae-81474f59befc].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8790933685814790871). {}
[INFO ] 2019-04-17T06:02:55,391Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=8790933685814790871). {invocation_id=6a51fd4e-27a4-4aa5-9cd1-e426a95ab046, invocation_timestamp=2019-04-17T06:02:55.376Z, session_id=6a51fd4e-27a4-4aa5-9cd1-e426a95ab046, session_timestamp=2019-04-17T06:02:55.376Z}
[INFO ] 2019-04-17T06:02:56,056Z [Mock network] flow.[ff58233a-930d-425e-b3ae-81474f59befc].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2755580793550485090). {}
[INFO ] 2019-04-17T06:02:56,165Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2755580793550485090). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=9aa139e7-c788-4a1c-9743-f9da1d85bcea, invocation_timestamp=2019-04-17T06:02:56.163Z, session_id=9aa139e7-c788-4a1c-9743-f9da1d85bcea, session_timestamp=2019-04-17T06:02:56.163Z}
[INFO ] 2019-04-17T06:02:56,580Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:56,597Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:56,616Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@27bc13f4 {}
[INFO ] 2019-04-17T06:02:56,743Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:56,745Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:56,748Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,147Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,167Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:57,169Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,174Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:57,190Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,192Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,311Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:57,313Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:02:57,321Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:02:57,334Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DFF1AB21D6F44B49010DDA21A4EBD971E41E9732A2AF5497DEAAE450EC62D9F9, not inserting the second time {}
[INFO ] 2019-04-17T06:02:57,342Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,348Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:57,351Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,354Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,355Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:57,357Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,361Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:57,365Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:57,397Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:57,432Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@791a53c7 {}
[INFO ] 2019-04-17T06:02:57,449Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:57,451Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,453Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,613Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,623Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:57,626Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,632Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:57,637Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,639Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,734Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:57,736Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:57,751Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B0435F968D783F9B92F4FC00E5263E94ADD3FFE06583144FFB7ABBEEC1ABD220, not inserting the second time {}
[INFO ] 2019-04-17T06:02:57,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,761Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:57,772Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:57,774Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,776Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:57,784Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,786Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,791Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:57,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,793Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,809Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:57,810Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:57,814Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:57,818Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:57,837Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:57,855Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1da1a8a4 {}
[INFO ] 2019-04-17T06:02:57,869Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:57,873Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:57,877Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,027Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,035Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:58,038Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,045Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,050Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,152Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:58,156Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:58,173Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5C0934F1AF792A778258FD5E455D91B010609C53A84B071536C1E6BE2CE0F71F, not inserting the second time {}
[INFO ] 2019-04-17T06:02:58,178Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:58,180Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,193Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480977169) {}
[INFO ] 2019-04-17T06:02:58,195Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,197Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,207Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,208Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:58,212Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480977626) {}
[INFO ] 2019-04-17T06:02:58,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,226Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,253Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,258Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:58,261Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,262Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,264Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:58,265Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480978038) {}
[INFO ] 2019-04-17T06:02:58,266Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:02:58,267Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[WARN ] 2019-04-17T06:02:58,365Z [Mock network] flow.[a12164b2-12fc-45ef-b841-5d5f49e6ae2f].run - Flow finished with exception {}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The IOU's value must be non-negative., contract: com.example.contract.IOUContract, transaction: E317A4D0EBD7E135A6C993F5F806BAF5FB4FBC9460D53F15ECF47DAD157747A1
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:127) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:80) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:143) ~[corda-core-3.3-corda.jar:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:82) ~[main/:?]
	at com.example.flow.ExampleFlow$Initiator.call(ExampleFlow.kt:32) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_162]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_162]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The IOU's value must be non-negative.
	at com.example.contract.IOUContract.createIOUChecker(IOUContract.kt:89) ~[main/:?]
	at com.example.contract.IOUContract.verify(IOUContract.kt:33) ~[main/:?]
	at net.corda.core.transactions.LedgerTransaction.verifyContracts(LedgerTransaction.kt:125) ~[corda-core-3.3-corda.jar:?]
	... 17 more
[INFO ] 2019-04-17T06:02:58,491Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:58,493Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:58,512Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@50a65fb9 {}
[INFO ] 2019-04-17T06:02:58,530Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:58,532Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,535Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,647Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,654Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:58,658Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,664Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:58,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,677Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,784Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:58,786Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:02:58,792Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:02:58,803Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 75CF86E66CDBBD3458DFE3ACD936D7E8368F3D49198F3F2FEA603887F042AC26, not inserting the second time {}
[INFO ] 2019-04-17T06:02:58,811Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,822Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:58,828Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,846Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,851Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:58,852Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:58,860Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:58,864Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:58,886Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:58,895Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4add8b8d {}
[INFO ] 2019-04-17T06:02:58,905Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:58,907Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:58,908Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:59,036Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:59,059Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:59,060Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,067Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,074Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,186Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:59,188Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:59,202Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B2FE44D621132D0080953C7A72C8A54CED375130FC6431EF999B52CDE565AAE8, not inserting the second time {}
[INFO ] 2019-04-17T06:02:59,209Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:59,212Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:59,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,226Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,233Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,238Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:59,239Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,240Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,241Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:59,242Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,245Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:02:59,246Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:02:59,268Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:02:59,285Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6ca96aef {}
[INFO ] 2019-04-17T06:02:59,314Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:02:59,317Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:59,318Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:59,451Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:02:59,473Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:02:59,474Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,479Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,483Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,484Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,598Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:02:59,606Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:02:59,627Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7D017F580DC4AD2C5998627E47C10675DD7DFC856FFC495A63680865DC9F4BC0, not inserting the second time {}
[INFO ] 2019-04-17T06:02:59,634Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:59,635Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,644Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480978658) {}
[INFO ] 2019-04-17T06:02:59,645Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,647Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,653Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,666Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480979060) {}
[INFO ] 2019-04-17T06:02:59,667Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,671Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:02:59,684Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,686Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,695Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:59,696Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,697Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,699Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:02:59,700Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480979474) {}
[INFO ] 2019-04-17T06:02:59,701Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:02:59,703Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:02:59,794Z [Mock network] flow.[c465c20f-975f-4b5f-b2b6-5eeb9f78c2fa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3846385040333449345). {}
[INFO ] 2019-04-17T06:02:59,895Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3846385040333449345). {invocation_id=9f42b83f-cfa1-4718-88a1-0ad1d1a84f64, invocation_timestamp=2019-04-17T06:02:59.892Z, session_id=9f42b83f-cfa1-4718-88a1-0ad1d1a84f64, session_timestamp=2019-04-17T06:02:59.892Z}
[INFO ] 2019-04-17T06:03:00,296Z [Mock network] flow.[c465c20f-975f-4b5f-b2b6-5eeb9f78c2fa].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3970960355664639439). {}
[INFO ] 2019-04-17T06:03:00,317Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3970960355664639439). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=44dfa58c-416a-43e9-920e-1aa4627520e3, invocation_timestamp=2019-04-17T06:03:00.313Z, session_id=44dfa58c-416a-43e9-920e-1aa4627520e3, session_timestamp=2019-04-17T06:03:00.313Z}
[INFO ] 2019-04-17T06:03:00,574Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:00,575Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:00,581Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7d2b2f3a {}
[INFO ] 2019-04-17T06:03:00,591Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:00,592Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:00,593Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:00,730Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:00,736Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:00,737Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,742Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:00,749Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,750Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,846Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:00,848Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:03:00,853Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:03:00,864Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4495DB1FAE14EFCE86056245AE2EF52996209836DDFDC2F23093CF17D2B0B50E, not inserting the second time {}
[INFO ] 2019-04-17T06:03:00,869Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,873Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:00,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,876Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:00,877Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:00,880Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:00,882Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:00,899Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:00,909Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7f256398 {}
[INFO ] 2019-04-17T06:03:00,919Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:00,921Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:00,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:01,035Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:01,043Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:01,047Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,052Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,059Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,160Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:01,162Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:01,176Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FBFB1A99E0654F8BC33566BBF28E6B7B1B586CAB28DAA8638792BDA3731A16DC, not inserting the second time {}
[INFO ] 2019-04-17T06:03:01,181Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:01,185Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,214Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:01,217Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,221Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,230Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,231Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,235Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:01,236Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,237Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,238Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:01,239Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,242Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:01,244Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:01,262Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:01,270Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7cf9dc4c {}
[INFO ] 2019-04-17T06:03:01,281Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:01,282Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:01,283Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:01,446Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:01,459Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:01,461Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,464Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,468Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,470Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,569Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:01,572Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:01,587Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E7F1634ADA0E267147ADE93B9E427B6CD2EA0C47EC499AC10577AD4A37FB81B3, not inserting the second time {}
[INFO ] 2019-04-17T06:03:01,593Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:01,596Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,607Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480980737) {}
[INFO ] 2019-04-17T06:03:01,613Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,615Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,628Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,630Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,631Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,641Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480981047) {}
[INFO ] 2019-04-17T06:03:01,642Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,644Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:01,652Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,675Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:01,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,678Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:01,680Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480981461) {}
[INFO ] 2019-04-17T06:03:01,681Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:01,682Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:01,761Z [Mock network] flow.[312e0eac-c039-4118-a94a-30ded4db9b0c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8321056234082820677). {}
[INFO ] 2019-04-17T06:03:01,809Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8321056234082820677). {invocation_id=752f2960-a409-4d97-9c21-854b1377513d, invocation_timestamp=2019-04-17T06:03:01.808Z, session_id=752f2960-a409-4d97-9c21-854b1377513d, session_timestamp=2019-04-17T06:03:01.808Z}
[INFO ] 2019-04-17T06:03:01,970Z [Mock network] flow.[312e0eac-c039-4118-a94a-30ded4db9b0c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6730210346361909444). {}
[INFO ] 2019-04-17T06:03:01,983Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-6730210346361909444). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=0c6e2a21-87b7-465c-91fe-a544dea9672a, invocation_timestamp=2019-04-17T06:03:01.982Z, session_id=0c6e2a21-87b7-465c-91fe-a544dea9672a, session_timestamp=2019-04-17T06:03:01.982Z}
[INFO ] 2019-04-17T06:03:02,097Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:02,098Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:02,105Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@28a9112c {}
[INFO ] 2019-04-17T06:03:02,119Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:02,120Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,124Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,241Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,247Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:02,248Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,252Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:02,267Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,269Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,371Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:02,374Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:03:02,379Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:03:02,394Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1B7F468F108A50467F25C7B6B4E7701D16ABD15434C72963554062E5E6BA9DD0, not inserting the second time {}
[INFO ] 2019-04-17T06:03:02,400Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,405Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:02,406Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,407Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,408Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:02,409Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,423Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:02,424Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:02,435Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:02,443Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@76be352d {}
[INFO ] 2019-04-17T06:03:02,450Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:02,451Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,452Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,587Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,595Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:02,596Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,600Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:02,602Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,605Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,697Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:02,701Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:02,715Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7904538CAC82BA57C79F22FA874AC268051D51CE6AD23FDFFA4AAE0CE43A6215, not inserting the second time {}
[INFO ] 2019-04-17T06:03:02,720Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,722Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:02,728Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:02,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,730Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:02,736Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,737Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,741Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:02,743Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,743Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,744Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:02,744Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:02,747Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:02,748Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:02,777Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:02,785Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@65669fbb {}
[INFO ] 2019-04-17T06:03:02,792Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:02,793Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,796Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,920Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:02,928Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:02,929Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:02,933Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:02,936Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:02,937Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,031Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:03,033Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:03,047Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 54A29665CD3462D018F8AFFE2673E02E53E31E64535C14A4F3D1EEA304DE0537, not inserting the second time {}
[INFO ] 2019-04-17T06:03:03,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:03,054Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:03,060Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480982248) {}
[INFO ] 2019-04-17T06:03:03,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,063Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:03,069Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,070Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:03,072Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:03,081Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480982596) {}
[INFO ] 2019-04-17T06:03:03,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,083Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:03,102Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,103Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,107Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:03,108Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,108Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,109Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:03,109Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480982929) {}
[INFO ] 2019-04-17T06:03:03,110Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:03,111Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:03,175Z [Mock network] flow.[3d277357-ef7a-4b10-9bf6-03d25d6cd0c6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3502046136136740613). {}
[INFO ] 2019-04-17T06:03:03,232Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=3502046136136740613). {invocation_id=c54b158a-c06c-4b4f-891d-7830b0633af4, invocation_timestamp=2019-04-17T06:03:03.231Z, session_id=c54b158a-c06c-4b4f-891d-7830b0633af4, session_timestamp=2019-04-17T06:03:03.231Z}
[INFO ] 2019-04-17T06:03:03,515Z [Mock network] flow.[3d277357-ef7a-4b10-9bf6-03d25d6cd0c6].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7436137178696853664). {}
[INFO ] 2019-04-17T06:03:03,531Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=7436137178696853664). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=2b50d113-c6ec-498d-8e14-56f9cdcb89df, invocation_timestamp=2019-04-17T06:03:03.530Z, session_id=2b50d113-c6ec-498d-8e14-56f9cdcb89df, session_timestamp=2019-04-17T06:03:03.530Z}
[INFO ] 2019-04-17T06:03:03,624Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:03,625Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:03,632Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4068dbed {}
[INFO ] 2019-04-17T06:03:03,652Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:03,653Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:03,654Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:03,770Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:03,780Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:03,781Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:03,795Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,797Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,897Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:03,899Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:03:03,902Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:03:03,914Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6E6B356E28DFF18C79AEB15514F37557EEB399595EEE776A743AB4BFA01EBC82, not inserting the second time {}
[INFO ] 2019-04-17T06:03:03,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,950Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:03,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,952Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,952Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:03,953Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:03,963Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:03,965Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:03,984Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:04,060Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63b994f4 {}
[INFO ] 2019-04-17T06:03:04,080Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:04,085Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,087Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,212Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,218Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:04,220Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,225Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,231Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,238Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,324Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:04,326Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:04,340Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BAFF28594C92219056D9E5C00F0C01E380E04704005E88A6137A082A5CDF23E8, not inserting the second time {}
[INFO ] 2019-04-17T06:03:04,347Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:04,349Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,356Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:04,358Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,360Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,368Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,369Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,372Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:04,373Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,374Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:04,375Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,377Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:04,378Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:04,393Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:04,401Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7ce32d2e {}
[INFO ] 2019-04-17T06:03:04,411Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:04,413Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,414Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,549Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:04,556Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:04,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,560Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,563Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,564Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,656Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:04,658Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:04,670Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BAA9ADC04888D042BB925F0C0C1C0E8FB3DC4F3ADC73145A88CA352CFEC5AE3E, not inserting the second time {}
[INFO ] 2019-04-17T06:03:04,674Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:04,677Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,682Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480983781) {}
[INFO ] 2019-04-17T06:03:04,683Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,684Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,692Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,693Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,694Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,700Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480984219) {}
[INFO ] 2019-04-17T06:03:04,701Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,702Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:04,710Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,711Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,714Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:04,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,717Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,718Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:04,719Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480984557) {}
[INFO ] 2019-04-17T06:03:04,721Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:04,722Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:04,785Z [Mock network] flow.[09f21f93-259e-4bac-8dac-97c4413eb1ef].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1483758781349293353). {}
[INFO ] 2019-04-17T06:03:04,838Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1483758781349293353). {invocation_id=68f36cbc-6beb-4792-9361-912445241e15, invocation_timestamp=2019-04-17T06:03:04.837Z, session_id=68f36cbc-6beb-4792-9361-912445241e15, session_timestamp=2019-04-17T06:03:04.837Z}
[INFO ] 2019-04-17T06:03:04,956Z [Mock network] flow.[09f21f93-259e-4bac-8dac-97c4413eb1ef].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4948639754866173990). {}
[INFO ] 2019-04-17T06:03:04,967Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-4948639754866173990). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=d783e59c-7463-48df-8c52-41f5234bec20, invocation_timestamp=2019-04-17T06:03:04.966Z, session_id=d783e59c-7463-48df-8c52-41f5234bec20, session_timestamp=2019-04-17T06:03:04.966Z}
[INFO ] 2019-04-17T06:03:05,006Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:05,057Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:05,110Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:05,111Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:05,114Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2372ada3 {}
[INFO ] 2019-04-17T06:03:05,134Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:05,135Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,137Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,238Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,246Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:05,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,251Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:05,257Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,258Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,360Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:05,361Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-04-17T06:03:05,365Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-04-17T06:03:05,375Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AA8140044F5DFC0AC6AA8F83EB735AD777B8334F8B94C1D8D71AB6F1CED54A5E, not inserting the second time {}
[INFO ] 2019-04-17T06:03:05,379Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,384Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:05,385Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,386Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,386Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:05,387Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,390Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:05,391Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:05,401Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:05,407Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4528486c {}
[INFO ] 2019-04-17T06:03:05,413Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:05,414Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,415Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,497Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,505Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:05,506Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,510Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:05,515Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,516Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,619Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:05,621Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:05,647Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0947983403E3C3A4DE6872B2014254AD5C10E352FACAF13BA7486D7D32FA8C94, not inserting the second time {}
[INFO ] 2019-04-17T06:03:05,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:05,669Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:05,671Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,673Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:05,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,687Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,698Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:05,699Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,701Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:05,734Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:05,742Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-04-17T06:03:05,743Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-04-17T06:03:05,766Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-04-17T06:03:05,781Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@34bd5a51 {}
[INFO ] 2019-04-17T06:03:05,792Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-04-17T06:03:05,793Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,794Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,926Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), IOUSchemaV1(name=com.example.schema.IOUSchema, version=1)] {}
[INFO ] 2019-04-17T06:03:05,934Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-04-17T06:03:05,935Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:05,940Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:05,943Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:05,944Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,031Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 74BAED207E95534813B23A8F882061FCBCC3B59D19BB5397A151C0C644C21B9C {}
[WARN ] 2019-04-17T06:03:06,032Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-04-17T06:03:06,044Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B55D6324CA5CF1842BDAD998993E136F2C8C45B1D57AAD484A159B71C4C0F202, not inserting the second time {}
[INFO ] 2019-04-17T06:03:06,049Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:06,051Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:06,056Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1555480985247) {}
[INFO ] 2019-04-17T06:03:06,057Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,059Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:06,063Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:06,065Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:06,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1555480985506) {}
[INFO ] 2019-04-17T06:03:06,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-04-17T06:03:06,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,079Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,082Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:06,082Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,083Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,083Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-04-17T06:03:06,084Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1555480985935) {}
[INFO ] 2019-04-17T06:03:06,085Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:06,085Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.ExampleFlow$Initiator to initiate com.example.flow.ExampleFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:06,091Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:06,092Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.example.flow.PayIOUFlow$Initiator to initiate com.example.flow.PayIOUFlow$Acceptor (version 1) {}
[INFO ] 2019-04-17T06:03:06,148Z [Mock network] flow.[b45bea0e-15d0-458f-bdf5-c06df41b230c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4574001368677184096). {}
[INFO ] 2019-04-17T06:03:06,201Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=4574001368677184096). {invocation_id=973889e3-4d32-4a38-920c-2e0d4ce47a8b, invocation_timestamp=2019-04-17T06:03:06.200Z, session_id=973889e3-4d32-4a38-920c-2e0d4ce47a8b, session_timestamp=2019-04-17T06:03:06.200Z}
[INFO ] 2019-04-17T06:03:06,376Z [Mock network] flow.[b45bea0e-15d0-458f-bdf5-c06df41b230c].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1009989319194071226). {}
[INFO ] 2019-04-17T06:03:06,407Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-1009989319194071226). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=2ce8b00c-38e7-49ec-9259-174ec2f1d891, invocation_timestamp=2019-04-17T06:03:06.406Z, session_id=2ce8b00c-38e7-49ec-9259-174ec2f1d891, session_timestamp=2019-04-17T06:03:06.406Z}
[INFO ] 2019-04-17T06:03:06,447Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,452Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,472Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: LinearStateQueryCriteria(participants=null, uuid=[00da6f8c-9b64-4898-9eee-75a96487e60e], externalId=[], status=UNCONSUMED, contractStateTypes=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,511Z [Mock network] flow.[d1a54328-bb3e-4a32-bc30-58a4a9c8de46].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-9061523496131799411). {}
[INFO ] 2019-04-17T06:03:06,526Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-9061523496131799411). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=2adf4eff-54b5-40e6-9958-df26626fba00, invocation_timestamp=2019-04-17T06:03:06.525Z, session_id=2adf4eff-54b5-40e6-9958-df26626fba00, session_timestamp=2019-04-17T06:03:06.525Z}
[INFO ] 2019-04-17T06:03:06,616Z [Mock network] flow.[d1a54328-bb3e-4a32-bc30-58a4a9c8de46].initiateSession - Initiating flow session with party O=Notary Service, L=Zurich, C=CH. Session id for tracing purposes is SessionId(toLong=-7503449877863648986). {}
[INFO ] 2019-04-17T06:03:06,641Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-7503449877863648986). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=6b299edc-c1c9-4509-972c-9a2bda9fe7eb, invocation_timestamp=2019-04-17T06:03:06.639Z, session_id=6b299edc-c1c9-4509-972c-9a2bda9fe7eb, session_timestamp=2019-04-17T06:03:06.639Z}
[INFO ] 2019-04-17T06:03:06,651Z [Mock network] flow.[5759b991-2f23-4a1b-b9bd-9bf0a7461277].call - Requesting 1 dependency(s) for verification from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T06:03:06,724Z [Mock network] flow.[5759b991-2f23-4a1b-b9bd-9bf0a7461277].call - Fetched 1 elements from O=Mock Company 1, L=London, C=GB {}
[INFO ] 2019-04-17T06:03:06,764Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[5C387E543852CF9847842E2D0F2003B17802A22A2DED1F34538DB93194819475(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,770Z [Mock network] flow.[d1a54328-bb3e-4a32-bc30-58a4a9c8de46].initiateSession - Initiating flow session with party O=Mock Company 2, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3718441999063826236). {}
[INFO ] 2019-04-17T06:03:06,781Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Mock Company 1, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3718441999063826236). {actor_id=Only For Testing, actor_owningIdentity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, invocation_id=c57c6007-cf0b-4985-8c6a-3f579b004be2, invocation_timestamp=2019-04-17T06:03:06.780Z, session_id=c57c6007-cf0b-4985-8c6a-3f579b004be2, session_timestamp=2019-04-17T06:03:06.780Z}
[INFO ] 2019-04-17T06:03:06,795Z [Mock network] vault.NodeVaultService._queryBy - Vault Query for contract type: interface net.corda.core.contracts.ContractState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=[5C387E543852CF9847842E2D0F2003B17802A22A2DED1F34538DB93194819475(0)], notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,828Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=CONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,832Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,834Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=CONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-04-17T06:03:06,837Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.example.state.IOUState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
